import { AudioSourceState, ILocalAudioTrack, IBufferSourceAudioTrack, BufferSourceAudioTrackInitConfig, IAgoraRTCClient, MicrophoneAudioTrackInitConfig, IMicrophoneAudioTrack, CustomAudioTrackInitConfig, IAgoraRTC } from "agora-rtc-sdk-ng";
import { IRtcData } from "~/interface";
declare const ArAudioSender_base: import("vue-class-component/lib/declarations").VueClass<unknown>;
export default class ArAudioSender extends ArAudioSender_base {
    rtcData: IRtcData;
    client: IAgoraRTCClient | null;
    AgoraRTC: IAgoraRTC | null;
    hasJoin: boolean;
    debugData: {
        [k: string]: any;
    };
    private type;
    private config;
    private volume;
    private monitor;
    private mute;
    track: ILocalAudioTrack | null;
    tid: string | null;
    trackIsCreating: boolean;
    monitorChange(newValue: boolean): void;
    muteChange(newValue: boolean): void;
    volumeChange(newVolume: number): void;
    hasJoinChange(newV: boolean, oldV: boolean): void;
    mounted(): Promise<void>;
    beforeDestroy(): void;
    __createTrackProcess(this: ArAudioSender): Promise<void>;
    __publish(): Promise<void>;
    __createTrack(): ((config: CustomAudioTrackInitConfig) => ILocalAudioTrack) | ((config?: MicrophoneAudioTrackInitConfig | undefined) => Promise<IMicrophoneAudioTrack>) | ((config: BufferSourceAudioTrackInitConfig) => Promise<IBufferSourceAudioTrack>);
    __play(): void;
    __stop(): void;
    __setVolume(num: number): void;
    __setEnabled(boolean: boolean): Promise<void>;
    setEnable(): Promise<void>;
    setDisable(): Promise<void>;
    __close(): void;
    __reCreateTrack(): Promise<void>;
    start(): Promise<void>;
    __pauseProcessAudioBuffer(): void;
    __resumeProcessAudioBuffer(): void;
    __stopProcessAudioBuffer(): void;
    __getCurrentState(): AudioSourceState | undefined;
    __getAudioBufferCurrentTime(): number;
    __getAudioBufferDuration(): number;
    __seekAudioBuffer(second: number): void;
    getCurrentState(): AudioSourceState | void;
    pause(): void;
    resume(): void;
    stop(): void;
    getCurrentTime(): number;
    getDuration(): number;
    seek(second: number): void;
    getTrack(): ILocalAudioTrack | null;
}
export {};
