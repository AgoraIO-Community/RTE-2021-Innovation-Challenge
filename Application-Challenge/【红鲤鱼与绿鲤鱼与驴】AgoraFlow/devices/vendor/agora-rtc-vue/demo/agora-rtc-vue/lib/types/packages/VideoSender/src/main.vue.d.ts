import { ILocalAudioTrack, ILocalVideoTrack, ScreenVideoTrackInitConfig, ICameraVideoTrack, CustomVideoTrackInitConfig, CameraVideoTrackInitConfig, BeautyEffectOptions, VideoEncoderConfiguration, VideoEncoderConfigurationPreset, IAgoraRTC, IAgoraRTCClient } from "agora-rtc-sdk-ng";
import { VideoSenderType, ScreenVideoWithAudio } from "~/interface";
import { IRtcData } from "~/interface";
declare const ArVideoSender_base: import("vue-class-component/lib/declarations").VueClass<unknown>;
export default class ArVideoSender extends ArVideoSender_base {
    rtcData: IRtcData;
    AgoraRTC: IAgoraRTC;
    hasJoin: boolean;
    debugData: {
        [k: string]: any;
    };
    client: IAgoraRTCClient;
    type: VideoSenderType;
    config: {
        withAudio?: ScreenVideoWithAudio;
        [k: string]: any;
    };
    optimization: "balanced" | "motion" | "detail";
    encoder: VideoEncoderConfiguration | VideoEncoderConfigurationPreset;
    beauty: boolean;
    cameraOff: boolean;
    beautyConfig: BeautyEffectOptions;
    customizationPlayer: boolean;
    track: ILocalVideoTrack | null;
    tid: string;
    audioTrack: ILocalAudioTrack | null;
    trackIsCreating: boolean;
    beautyChange(n: boolean, o: boolean): Promise<void>;
    cameraOffChange(n: boolean, o: boolean): Promise<void>;
    beautyConfigChange(n: BeautyEffectOptions): Promise<void>;
    optimizationChange(newValue: "balanced" | "motion" | "detail", oldValue: "balanced" | "motion" | "detail"): Promise<void>;
    encodeChange(n: boolean, o: boolean): Promise<void>;
    hasJoinChange(newV: boolean, oldV: boolean): void;
    uidChange(): void;
    mounted(): Promise<void>;
    beforeDestroy(): void;
    __setOptimizationMode(): Promise<void>;
    __setEncoderConfiguration(): Promise<void>;
    __createTrack(): ((config: CustomVideoTrackInitConfig) => ILocalVideoTrack) | ((config?: CameraVideoTrackInitConfig | undefined) => Promise<ICameraVideoTrack>) | {
        (config: ScreenVideoTrackInitConfig, withAudio: "enable"): Promise<[ILocalVideoTrack, ILocalAudioTrack]>;
        (config: ScreenVideoTrackInitConfig, withAudio: "disable"): Promise<ILocalVideoTrack>;
        (config: ScreenVideoTrackInitConfig, withAudio?: "disable" | "enable" | "auto" | undefined): Promise<ILocalVideoTrack | [ILocalVideoTrack, ILocalAudioTrack]>;
    };
    __createTrackProcess(): Promise<void>;
    __publish(): Promise<void>;
    __setBeautyEffect(enabled: boolean, options?: BeautyEffectOptions): Promise<void>;
    __closeBeautyEffect(): Promise<void>;
    __openBeautyEffect(options?: BeautyEffectOptions): Promise<void>;
    __emitVideoReadyEvent(info: string): void;
    __play(player?: HTMLElement | null): void;
    __stop(): void;
    play(player?: HTMLElement | null): void;
    stop(): void;
    __close(): void;
    __reCreateTrack(): Promise<void>;
    start(): Promise<void>;
    getTrack(): [ILocalVideoTrack | null, ILocalAudioTrack] | ILocalVideoTrack | null;
    __setEnabled(boolean: boolean): Promise<void>;
    setEnable(): Promise<void>;
    setDisable(): Promise<void>;
    closeAudio(): void;
    __setAudioEnabled(boolean: boolean): Promise<void>;
    setAudioEnable(): Promise<void>;
    setAudioDisable(): Promise<void>;
}
export {};
