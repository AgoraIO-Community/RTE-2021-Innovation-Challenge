const axios = require("axios");
const mqtt = require("mqtt");

module.exports = function(RED) {
    function AgoradownstreamNode(config) {
        RED.nodes.createNode(this,config);
        var node = this;

        node.on("input", function(msg, send, done){
            let payload;
            if (!msg.payload){
                payload = {
                    type: "downstream",
                };
            }else{
                payload = JSON.parse(msg.payload);
            }
            payload.downstreamOptions = JSON.parse(JSON.stringify(config.downstreamOptions));
            RED.util.setMessageProperty(msg, "topic", "/agora/downstream/" + config.name, true);
            RED.util.setMessageProperty(msg, "payload", payload, true);
            // msg.payload = JSON.stringify(payload)
            send(msg);
            console.error("Sent!!!", msg);
            done()
        });
        setTimeout(()=>{
            const msg = {};
            node.emit("input", msg);
            setTimeout(()=>{
                const gMsg = getGlobalMsg(msg);
                downstreamSendToEaseMob(gMsg);
                // console.error("global.msgs", JSON.stringify(global.msgs, null, 2));
            }, 100);
        }, 50)
    }
    RED.nodes.registerType("agora-downstream",AgoradownstreamNode);
}


async function downstreamSendToEaseMob(msg){

    const client = await getMqttClient();
    console.error("Send message", msg.topic, JSON.stringify(msg.payload, null, 2));
    msg.payload.requestId = Date.now();
    client.publish(msg.topic, JSON.stringify(msg.payload, null, 2), {
        retain: true
    });
    console.log("Publish to topic", msg.topic, "\t\t\t", msg.payload);
}