const axios = require("axios");
const mqtt = require("mqtt");

module.exports = function(RED) {
    function MediaStreamNode(config) {
        RED.nodes.createNode(this,config);
        var node = this;
        node.on("input", function(msg, send, done){
            let payload;
            if (!msg.payload){
                payload = {};
            }else{
                payload = JSON.parse(msg.payload);
            }
            payload.streamOptions = config.streamOptions;
            RED.util.setMessageProperty(msg, "topic", "/agora/upstream/" + config.deviceName, true);
            RED.util.setMessageProperty(msg, "payload", payload, true);
            // msg.payload = JSON.stringify(payload)
            send(msg);
            // console.error("Sent!!!", msg);
            done()
        });
        setTimeout(()=>{
            const msg = {};
            node.emit("input", msg);
            setTimeout(()=>{
                sendToEaseMob(msg);
            }, 1000);
        }, 100)
    }
    RED.nodes.registerType("media-stream",MediaStreamNode);
}

async function sendToEaseMob(msg){
    console.log("sendToEaseMob", msg);
    const res = await axios({
        method: 'POST',
        url: `http://a1.easemob.com/1128210519085787/fangfa2/token`,
        data: JSON.stringify({
            grant_type: "password",
            username: "mqttuser2",
            password:"mqttuser2"
        }, null, 2),
        headers: {
            'Content-Type': 'application/json'
        }
    });

    var client  = mqtt.connect('mqtts://0ljii0.cn1.mqtt.chat:1884', {
        protocolVersion: 5,
        clientId: "mqttuser2@0ljii0",
        username: "mqttuser2",
        password: res.data.access_token
    })
    client.on('connect', function () {
        console.log("sendToEaseMob Connected");
        client.publish(msg.topic, JSON.stringify(msg.payload, null, 2), {
            retain: true
        });
        console.log("Publish to topic", msg.topic, "\t\t\t", msg.payload);
    })
    client.on('error', function(err){
        console.error(err)
    })
    client.subscribe(msg.topic);
    client.on("message", function(topic, message){
        console.log("Loopback message", topic, message.toString());
    });
};