// Generated by CoffeeScript 1.12.7
(function() {
  var Hs, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Hs || (root.Hs = {});

  Hs = root.Hs;

  root.page_edit = true;

  root.symbol_window_select_allow = false;

  $(function() {
    var block_comment_entities_add_now, dom_current, editing_now, editing_now_timeout, fix_page_edit_tools_list_cover, get_max_zIndex, get_more_select_base, iframe_add_iframe_pin, iframe_add_iframe_pin_timout, latest_current_copy_now_num, load_font_color_html, save_dom_current_timeout, send_data, send_data_node_num_check, send_data_now, update_desc, update_desc_timeout, update_dom_content, update_dom_content_timeout, update_dom_iframe, update_dom_iframe_timeout, update_dom_video, update_dom_video_timeout, update_grid_graph, update_grid_graph_timeout, update_main_area, update_main_area_timeout, update_title, update_title_timeout;
    send_data_now = false;
    send_data = {
      "dom_id": null,
      "range": null,
      "start": null,
      "start_node": null,
      "end": null,
      "end_node": null,
      "text": null,
      "uuid": null,
      "base_text": null
    };
    send_data_node_num_check = function(section, node) {
      var i, j, ref;
      for (i = j = 0, ref = section.childNodes.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (section.childNodes[i] === node) {
          return i;
        }
      }
      return -1;
    };
    dom_current = "";
    console.log("page edit");
    editing_now_timeout = null;
    editing_now = function(dom) {
      if (editing_now_timeout !== null) {
        clearTimeout(editing_now_timeout);
      }
      dom.addClass("self-editing");
      return editing_now_timeout = setTimeout(function() {
        console.log("editing_now_timeout");
        return dom.removeClass("self-editing");
      }, 1500);
    };
    save_dom_current_timeout = null;
    update_dom_content_timeout = null;
    update_dom_video_timeout = null;
    update_dom_iframe_timeout = null;
    update_title_timeout = null;
    update_desc_timeout = null;
    update_grid_graph_timeout = null;
    update_main_area_timeout = null;
    root.update_dom_content_img = function(sections) {
      var dom, html;
      dom = sections.parents(".dom");
      send_data["dom_id"] = dom.attr("id");
      html = sections.html();
      send_data["text"] = html;
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      return update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(dom, send_data);
      }, 500);
    };
    update_dom_content = function(dom, adata) {
      var dom_content, dom_owner, dom_tree, dom_tree_list;
      dom_tree = dom.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      $(".network_now").text("保存中");
      return $.ajax({
        url: "/api/page/update_dom_content",
        data: {
          block_id: BLOCK_ID,
          dom_owner: dom_owner,
          dom_current: dom_current,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info === "ok") {
            $(".network_now").text("已保存");
            return setTimeout(function() {
              return $(".network_now").remove();
            }, 500);
          } else if (data.info === "error") {
            return $(".network_now").text(data.about);
          }
        },
        error: function(data) {
          console.log(data);
          return $(".network_now").text("保存失败");
        }
      });
    };
    update_dom_video = function(dom, adata) {
      var dom_content, dom_owner, dom_tree, dom_tree_list;
      dom_tree = dom.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_dom_video",
        data: {
          block_id: BLOCK_ID,
          dom_owner: dom_owner,
          dom_current: dom_current,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    update_dom_iframe = function(dom, adata) {
      var dom_content, dom_owner, dom_tree, dom_tree_list;
      dom_tree = dom.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_dom_iframe",
        data: {
          block_id: BLOCK_ID,
          dom_owner: dom_owner,
          dom_current: dom_current,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    $("body").on("keydown", ".iframe_tool>textarea", function(evt) {
      var a, dom, s, str, str_0, str_1;
      dom = $(this);
      if (evt.key === "Tab") {
        a = this;
        s = a.selectionStart;
        str_0 = a.value.substring(0, s);
        str_1 = a.value.substring(s, a.value.length);
        str = str_0 + "    " + str_1;
        a.value = str;
        a.selectionStart = s + 4;
        a.selectionEnd = s + 4;
        return false;
      }
    });
    $("body").on("keydown", ".dom.dom_text,.dom.dom_img", function(evt) {
      if (!send_data_now) {
        send_data["dom_id"] = $(this).attr("id");
        return send_data_now = true;
      }
    });
    $("body").on("keyup", ".dom.dom_text,.dom.dom_img", function(evt) {
      var dom, html, range, ref, section, sections;
      if (send_data_now) {
        range = window.getSelection().getRangeAt(0);
        section = range.commonAncestorContainer.parentElement;
        if ($(section).hasClass("sections")) {
          if ((ref = evt.keyCode) === 8) {
            if ($(section).find(".section").length < 1) {
              $(section).append("<div class=\"section\"><br></div>");
            }
          }
          html = $(section).html();
        } else {
          sections = $(section).parents(".sections");
          html = sections.html();
          if ($(section).hasClass("dom")) {
            $(section).find(".sections").append("<div class=\"section\"><br></div>");
          }
        }
        send_data["text"] = html;
      }
      dom = $(this);
      editing_now(dom);
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      if ($(".network_now").length < 1) {
        $("body").append("<div class=\"network_now\">正在编辑</div>");
      }
      return update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(dom, send_data);
      }, 500);
    });
    iframe_add_iframe_pin_timout = null;
    iframe_add_iframe_pin = function(dom_sequence) {
      clearTimeout(iframe_add_iframe_pin_timout);
      return iframe_add_iframe_pin_timout = setTimeout(function() {
        var iframe_pin;
        if ($("#" + dom_sequence).length < 1) {
          return iframe_add_iframe_pin(dom_sequence);
        }
        iframe_pin = "<div class=\"add_iframe_pin_hover_info\">\n<p>input some hover words here</p>\n</div>\n<style>\n.add_iframe_pin_hover_info{\n        width:30px;\n        height:20px;\n}\n.add_iframe_pin_hover_info>p{}\n.add_hover_info:hover{}\n</style>";
        $("#" + dom_sequence).find(".iframe_html").val(iframe_pin);
        return $("#" + dom_sequence).find(".iframe_save").click();
      }, 1000);
    };
    $("body").on("click", ".page_edit_tools>div>.add", function(evt) {
      var _h, _hbase, _w, _wbase, aim_dom_id, aim_id, ajax_data, current_copy, current_copy_list, dom_type, dom_type_old, ref, uri;
      dom_type_old = $(this).attr("data-type");
      dom_type = dom_type_old;
      dom_current = $(".dom_current").val();
      _hbase = $(window).scrollTop();
      _wbase = $(window).scrollLeft();
      _w = parseInt($(window).width() / 7 * 3 - $(".main_area").offset()["left"]);
      _h = parseInt($(window).height() / 7 * 3);
      uri = "/api/page/add_dom";
      if (dom_type === "pin") {
        dom_type = "iframe";
        ajax_data = {
          block_id: BLOCK_ID,
          dom_owner: dom_current,
          dom_type: dom_type,
          dom_position_x: _wbase + _w,
          dom_position_y: _hbase + _h
        };
      } else if (dom_type === "domcopy") {
        current_copy = localStorage.getItem("current_copy");
        if (current_copy === null) {
          return;
        }
        current_copy = JSON.parse(current_copy);
        if (current_copy.length > 1) {
          uri = "/api/page/copy_doms";
          ajax_data = {
            block_id: BLOCK_ID,
            dom_owner: dom_current,
            dom_type: dom_type,
            dom_position_x: _wbase + _w,
            dom_position_y: _hbase + _h,
            current_copy: JSON.stringify(current_copy)
          };
        } else {
          uri = "/api/page/copy_dom";
          current_copy_list = current_copy[0].split("COPYDOM//");
          ref = current_copy_list[1].split(","), aim_id = ref[0], aim_dom_id = ref[1];
          ajax_data = {
            block_id: BLOCK_ID,
            dom_owner: dom_current,
            dom_type: dom_type,
            dom_position_x: _wbase + _w,
            dom_position_y: _hbase + _h,
            aim_id: aim_id,
            aim_dom_id: aim_dom_id
          };
        }
      } else if (dom_type === "more_select") {
        $(".card_more_select").removeClass("card_more_selected");
        return;
      } else if (dom_type === "area_select") {
        if ($(".add_btn_area_select").hasClass("show")) {
          $(".add_btn_area_select").removeClass("show");
          root.symbol_window_select_allow = false;
        } else {
          $(".add_btn_area_select").addClass("show");
          root.symbol_window_select_allow = true;
        }
        return;
      } else {
        ajax_data = {
          block_id: BLOCK_ID,
          dom_owner: dom_current,
          dom_type: dom_type,
          dom_position_x: _wbase + _w,
          dom_position_y: _hbase + _h
        };
      }
      return $.ajax({
        url: uri,
        data: ajax_data,
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info === "error") {
            alert(data.about);
          }
          if (data.info === "ok") {
            if (dom_type_old === "pin") {
              return iframe_add_iframe_pin(data.dom_sequence);
            }
          }
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    $("body").on("click", ".card>.card_del", function(evt) {
      var card, dom, dom_owner, dom_tree, dom_tree_list;
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      return $.ajax({
        url: "/api/page/del_dom",
        data: {
          block_id: BLOCK_ID,
          dom_owner: dom_owner,
          dom_current: dom_current
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    root.page_edit_current = function(dom, save, callback) {
      var block_height, block_width, dom_owner, dom_tree, dom_tree_list, h, w, x, y, z;
      if (save == null) {
        save = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (dom === null) {
        dom_owner = "";
        $(".dom_owner").val(dom_owner);
        dom_current = "";
        return $(".dom_current").val(dom_current);
      } else {
        if (dom.hasClass("just_tool_move")) {
          fix_page_edit_tools_list_cover();
          return;
        }
        block_width = $(".main_area").width();
        block_height = $(".main_area").height();
        $("input.block_width").val(block_width);
        $("input.block_height").val(block_height);
        x = dom.position().left;
        y = dom.position().top;
        $("input.dom_position_x").val(x);
        $("input.dom_position_y").val(y);
        w = dom.width();
        h = dom.height();
        $("input.dom_position_w").val(w);
        $("input.dom_position_h").val(h);
        z = dom.css("zIndex");
        if (z === "auto") {
          z = "0";
        }
        z = parseInt(z);
        $("input.dom_position_z").val(z);
        dom_tree = dom.attr("data-tree");
        dom_tree_list = dom_tree.split("_");
        dom_owner = dom_tree_list[dom_tree_list.length - 1];
        $(".dom_owner").val(dom_owner);
        dom_current = dom_tree;
        $(".dom_current").val(dom_current);
        if (save) {
          if (callback === null) {
            save_dom_current();
          } else {
            save_dom_current(function() {
              return callback(dom);
            });
          }
          return editing_now(dom);
        }
      }
    };
    root.save_dom_current = function(callback) {
      var dom_owner, dom_scroll_auto_now;
      if (callback == null) {
        callback = null;
      }
      dom_current = $(".dom_current").val();
      dom_owner = $(".dom_owner").val();
      dom_scroll_auto_now = "";
      if ($("#" + dom_current).hasClass("dom_scroll_auto")) {
        dom_scroll_auto_now = "dom_scroll_auto";
      }
      return $.ajax({
        url: "/api/page/update_dom",
        data: {
          block_id: BLOCK_ID,
          dom_owner: dom_owner,
          dom_current: dom_current,
          dom_position_x: $("input.dom_position_x").val(),
          dom_position_y: $("input.dom_position_y").val(),
          dom_position_w: $("input.dom_position_w").val(),
          dom_position_h: $("input.dom_position_h").val(),
          dom_position_z: $("input.dom_position_z").val(),
          dom_scroll: dom_scroll_auto_now
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          console.log(typeof callback);
          if (callback !== null) {
            return callback();
          }
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    $("body").on("click", ".save", function(evt) {
      return save_dom_current();
    });
    $("body").on("click", ".block_permission_span_btns>span", function(evt) {
      var dom, permission;
      dom = $(this);
      permission = dom.attr("data-value");
      return $.ajax({
        url: "/api/page/set_permission",
        data: {
          block_id: BLOCK_ID,
          permission: permission
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info === "ok") {
            $(".block_permission_span_btns>span").removeClass("selected");
            return $(".block_permission_span_btns>span[data-value=" + permission + "]").addClass("selected");
          } else {
            return alert(data.about);
          }
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    $("body").on("click", ".block_editors_tool>.add", function(evt) {
      var aim_user_id;
      aim_user_id = $(".block_editors_tool>.block_editors_search").val();
      return $.ajax({
        url: "/api/page/add_editor",
        data: {
          block_id: BLOCK_ID,
          aim_user_id: aim_user_id
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    $("body").on("click", ".block_editors_tool>.del", function(evt) {
      var aim_user_id;
      aim_user_id = $(".block_editors_tool>.block_editors_search").val();
      return $.ajax({
        url: "/api/page/del_editor",
        data: {
          block_id: BLOCK_ID,
          aim_user_id: aim_user_id
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    $("body").on("click", ".card>.z_index_max", function(evt) {
      var card, card_zIndex, dom, dom_owner, dom_tree, dom_tree_list, max_zIndx;
      console.log("zindex update z_index_max");
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      card_zIndex = card.css("zIndex");
      max_zIndx = get_max_zIndex() + 1;
      $("input.dom_position_z").val(max_zIndx);
      card.find(".z_index_num").text(card_zIndex);
      card.css("zIndex", max_zIndx);
      return page_edit_current(card, true);
    });
    $("body").on("click", ".card>.z_index_up", function(evt) {
      var card, card_zIndex, dom, dom_owner, dom_tree, dom_tree_list, max_zIndx;
      console.log("zindex update z_index_up");
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      card_zIndex = card.css("zIndex");
      if (card_zIndex === "auto") {
        card_zIndex = 0;
      }
      card_zIndex = parseInt(card_zIndex);
      max_zIndx = get_max_zIndex();
      if (card_zIndex <= max_zIndx) {
        card_zIndex += 1;
      }
      $("input.dom_position_z").val(card_zIndex);
      card.find(".z_index_num").text(card_zIndex);
      card.css("zIndex", card_zIndex);
      return page_edit_current(card, true);
    });
    $("body").on("click", ".card>.z_index_down", function(evt) {
      var card, card_zIndex, dom, dom_owner, dom_tree, dom_tree_list;
      console.log("zindex update z_index_down");
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      card_zIndex = card.css("zIndex");
      if (card_zIndex === "auto") {
        card_zIndex = 0;
      }
      card_zIndex = parseInt(card_zIndex);
      if (card_zIndex > 0) {
        card_zIndex -= 1;
      }
      $("input.dom_position_z").val(card_zIndex);
      card.find(".z_index_num").text(card_zIndex);
      card.css("zIndex", card_zIndex);
      return page_edit_current(card, true);
    });
    get_max_zIndex = function() {
      var card, card_zIndex, j, len, max_zIndx, ref;
      max_zIndx = 0;
      ref = $(".card.dom");
      for (j = 0, len = ref.length; j < len; j++) {
        card = ref[j];
        card_zIndex = $(card).css("zIndex");
        if (card_zIndex === "auto") {
          card_zIndex = 0;
        } else {
          card_zIndex = parseInt(card_zIndex);
        }
        if (max_zIndx < card_zIndex) {
          max_zIndx = card_zIndex;
        }
      }
      return max_zIndx;
    };
    $("body").on("click", ".section>div>.video_save", function(evt) {
      var dom, section;
      if (!send_data_now) {
        send_data_now = true;
        section = $(this).parents(".section");
        dom = $(this).parents(".dom");
        send_data["dom_id"] = dom.attr("id");
        send_data["text"] = {
          "src": section.find(".video_src").val(),
          "type": section.find(".video_type").val(),
          "poster": section.find(".video_poster").val()
        };
        editing_now(dom);
        if (editing_now_timeout !== null) {
          clearTimeout(update_dom_video_timeout);
        }
        return update_dom_video_timeout = setTimeout(function() {
          return update_dom_video(dom, send_data);
        }, 500);
      }
    });
    $("body").on("click", ".section>div>.iframe_save", function(evt) {
      var _html, a, dom, iframe_now, section;
      if (!send_data_now) {
        send_data_now = true;
        section = $(this).parents(".section");
        dom = $(this).parents(".dom");
        send_data["dom_id"] = dom.attr("id");
        iframe_now = uuid2(6, null);
        $("body").append("<iframe id=\"" + iframe_now + "\" class=\"hide\"></iframe>");
        a = $("#" + iframe_now)[0];
        a.contentDocument.body.innerHTML = section.find(".iframe_html").val();
        if (a.contentDocument.body.getInnerHTML === void 0) {
          _html = a.contentDocument.body.innerHTML;
        } else {
          _html = a.contentDocument.body.getInnerHTML();
        }
        send_data["text"] = {
          "html": _html
        };
        section.find(".iframe_html").val(_html);
        $("" + iframe_now).remove();
        editing_now(dom);
        if (editing_now_timeout !== null) {
          clearTimeout(update_dom_iframe_timeout);
        }
        return update_dom_iframe_timeout = setTimeout(function() {
          return update_dom_iframe(dom, send_data);
        }, 500);
      }
    });
    update_title = function(adata) {
      var dom_content;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_title",
        data: {
          block_id: BLOCK_ID,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    update_desc = function(adata) {
      var dom_content;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_desc",
        data: {
          block_id: BLOCK_ID,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          var block_desc_content_old;
          console.log(JSON.stringify(data));
          if (data.info !== "ok") {
            $(".block_desc_content_save").text("error");
            alert(data.about);
            return;
          }
          $(".block_desc_content_save").text("saved");
          $(".block_desc_content_unsave").addClass("hide");
          block_desc_content_old = $(".block_desc_content").val();
          return setTimeout(function() {
            return $(".block_desc_content_save").text("save");
          }, 1000);
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    update_main_area = function(adata) {
      var dom_content;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_main_area",
        data: {
          block_id: BLOCK_ID,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info !== "ok") {
            $(".block_main_area_save").text("error");
            alert(data.about);
            return;
          }
          $(".block_main_area_save").text("saved");
          return setTimeout(function() {
            return $(".block_main_area_save").text("save");
          }, 1000);
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    $("body").on("click", ".block_main_area_save", function(evt) {
      var _h, _w, dom, h, w;
      $(".block_main_area_save").text("saving");
      w = $(".block_main_area_w").val();
      h = $(".block_main_area_h").val();
      send_data["text"] = {
        "w": w,
        "h": h
      };
      _w = parseInt(w);
      _h = parseInt(h);
      $(".main_area").css({
        "width": _w + "px",
        "height": _h + "px"
      });
      dom = $(this);
      editing_now(dom);
      if (editing_now_timeout !== null) {
        clearTimeout(update_main_area_timeout);
      }
      return update_main_area_timeout = setTimeout(function() {
        return update_main_area(send_data);
      }, 500);
    });
    update_grid_graph = function(adata) {
      var dom_content;
      adata["uuid"] = uuid2(6, null);
      uuid2s.push(adata["uuid"]);
      if (typeof adata["text"] === "undefined") {
        console.log("undefined", adata);
        send_data_now = false;
        return;
      }
      dom_content = JSON.stringify(adata);
      send_data_now = false;
      return $.ajax({
        url: "/api/page/update_grid_graph",
        data: {
          block_id: BLOCK_ID,
          dom_content: dom_content
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info !== "ok") {
            $(".block_grid_graph_save").text("error");
            alert(data.about);
            return;
          }
          $(".block_grid_graph_save").text("saved");
          return setTimeout(function() {
            return $(".block_grid_graph_save").text("save");
          }, 1000);
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    $("body").on("click", ".block_grid_graph_save", function(evt) {
      var _h, _w, dom, h, w;
      $(".block_grid_graph_save").text("saving");
      w = $(".block_grid_graph_w").val();
      h = $(".block_grid_graph_h").val();
      send_data["text"] = {
        "w": w,
        "h": h
      };
      _w = parseInt(w) * 2;
      _h = parseInt(h) * 2;
      $("body").css({
        "backgroundSize": _w + "px " + _h + "px"
      });
      dom = $(this);
      editing_now(dom);
      if (editing_now_timeout !== null) {
        clearTimeout(update_grid_graph_timeout);
      }
      return update_grid_graph_timeout = setTimeout(function() {
        return update_grid_graph(send_data);
      }, 500);
    });
    $("body").on("input propertychange", ".top_area_info_title", function(evt) {
      var dom, title, title_list, title_tag;
      title = $(this).val();
      send_data["title"] = title;
      title_tag = "Page Edit |";
      title_list = window.document.title.split(title_tag);
      title_list[0] = title + " | ";
      window.document.title = title_list.join(title_tag);
      dom = $(this);
      editing_now(dom);
      if (editing_now_timeout !== null) {
        clearTimeout(update_title_timeout);
      }
      return update_title_timeout = setTimeout(function() {
        return update_title(send_data);
      }, 500);
    });
    $("body").on("click", ".add_btn_more", function(evt) {
      var clc, dom;
      dom = $(this);
      clc = dom.parents(".page_edit_tools").position().left;
      fix_page_edit_tools_list_cover();
      if (dom.hasClass("show")) {
        dom.removeClass("show");
        return $(".page_edit_tools_list_cover").addClass("hide");
      } else {
        dom.addClass("show");
        return $(".page_edit_tools_list_cover").removeClass("hide");
      }
    });
    fix_page_edit_tools_list_cover = function() {
      if ($(".page_edit_tools").position().left > $(window).width() / 2 + 60) {
        return $(".page_edit_tools_list_cover").css({
          "left": "unset",
          "right": 60
        });
      } else {
        return $(".page_edit_tools_list_cover").css({
          "right": "unset",
          "left": 60
        });
      }
    };
    $("body").on("click", ".card>.card_text_align", function(evt) {
      var all_section, card, dom, dom_owner, dom_tree, dom_tree_list, html, item_section, j, len;
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      all_section = card.find(".section");
      for (j = 0, len = all_section.length; j < len; j++) {
        item_section = all_section[j];
        if (dom.hasClass("text_align_left")) {
          $(item_section).css("textAlign", "left");
        } else if (dom.hasClass("text_align_center")) {
          $(item_section).css("textAlign", "center");
        } else if (dom.hasClass("text_align_right")) {
          $(item_section).css("textAlign", "right");
        }
      }
      send_data_now = true;
      html = card.find(".sections").html();
      send_data["dom_id"] = card.attr("id");
      send_data["text"] = html;
      editing_now(card);
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      if ($(".network_now").length < 1) {
        $("body").append("<div class=\"network_now\">正在编辑</div>");
      }
      return update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(card, send_data);
      }, 500);
    });
    $("body").on("click", ".card>.card_font_size", function(evt) {
      var _font_size_now, all_section, card, dom, dom_owner, dom_tree, dom_tree_list, font_size_action, html, item_section, j, len;
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      all_section = card.find(".section");
      if (dom.hasClass("font_size_small")) {
        font_size_action = "small";
      } else if (dom.hasClass("font_size_big")) {
        font_size_action = "big";
      } else {
        return;
      }
      for (j = 0, len = all_section.length; j < len; j++) {
        item_section = all_section[j];
        _font_size_now = parseInt($(item_section).css("fontSize"));
        if (font_size_action === "small") {
          _font_size_now = _font_size_now - 2;
          if (_font_size_now < 12) {
            _font_size_now = 12;
          }
        } else if (font_size_action === "big") {
          _font_size_now += 2;
        }
        $(item_section).css("fontSize", _font_size_now + "px");
      }
      send_data_now = true;
      send_data["dom_id"] = card.attr("id");
      html = card.find(".sections").html();
      send_data["text"] = html;
      editing_now(card);
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      if ($(".network_now").length < 1) {
        $("body").append("<div class=\"network_now\">正在编辑</div>");
      }
      return update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(card, send_data);
      }, 500);
    });
    $("body").on("click", ".card>.card_scroll_auto", function(evt) {
      var card, dom, dom_owner, dom_tree, dom_tree_list;
      console.log("card_scroll_auto update card_scroll_auto");
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      if ($("#" + dom_current).hasClass("dom_scroll_auto")) {
        card.removeClass("dom_scroll_auto");
      } else {
        card.addClass("dom_scroll_auto");
      }
      return page_edit_current(card, true);
    });
    load_font_color_html = function(dom_now, current_color, callback) {
      var html;
      if (current_color == null) {
        current_color = "#000000";
      }
      html = "<div class=\"card_font_color_demos\">\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ffffff;\" data-value=\"#ffffff\"\n            data-dark=\"light\"\n            data-name=\"白\">\n            <span>白</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #000000;\" data-value=\"#000000\"\n            data-dark=\"dark\"\n            data-name=\"漆黑\">\n            <span>漆黑</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ff0000;\" data-value=\"#ff0000\"\n            data-dark=\"dark\"\n            data-name=\"赤\">\n            <span>赤</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ff7800;\" data-value=\"#ff7800\"\n            data-dark=\"dark\"\n            data-name=\"橙\">\n            <span>橙</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ffd900;\" data-value=\"#ffd900\"\n            data-dark=\"light\"\n            data-name=\"黄\">\n            <span>黄</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #a3e043;\" data-value=\"#a3e043\"\n            data-dark=\"dark\"\n            data-name=\"葱绿\">\n            <span>葱绿</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #37d9f0;\" data-value=\"#37d9f0\"\n            data-dark=\"dark\"\n            data-name=\"湖蓝\">\n            <span>湖蓝</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #4da8ee;\" data-value=\"#4da8ee\"\n            data-dark=\"dark\"\n            data-name=\"天色\">\n            <span>天色</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #956fe7;\" data-value=\"#956fe7\"\n            data-dark=\"dark\"\n            data-name=\"藤紫\">\n            <span>藤紫</span>\n    </div>\n\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #f3f3f4;\" data-value=\"#f3f3f4\"\n            data-dark=\"light\"\n            data-name=\"白练\">\n            <span>白练</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #cccccc;\" data-value=\"#cccccc\"\n            data-dark=\"light\"\n            data-name=\"白鼠\">\n            <span>白鼠</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #fef2f0;\" data-value=\"#fef2f0\"\n            data-dark=\"light\"\n            data-name=\"樱\">\n            <span>樱</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #fef5e7;\" data-value=\"#fef5e7\"\n            data-dark=\"light\"\n            data-name=\"缟\">\n            <span>缟</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #fefcd9;\" data-value=\"#fefcd9\"\n            data-dark=\"light\"\n            data-name=\"练\">\n            <span>练</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #edf6e8;\" data-value=\"#edf6e8\"\n            data-dark=\"light\"\n            data-name=\"芽\">\n            <span>芽</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #e6fafa;\" data-value=\"#e6fafa\"\n            data-dark=\"light\"\n            data-name=\"水\">\n            <span>水</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ebf4fc;\" data-value=\"#ebf4fc\"\n            data-dark=\"light\"\n            data-name=\"缥\">\n            <span>缥</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #f0edf6;\" data-value=\"#f0edf6\"\n            data-dark=\"light\"\n            data-name=\"丁香\">\n            <span>丁香</span>\n    </div>\n\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #d7d8d9;\" data-value=\"#d7d8d9\"\n            data-dark=\"light\"\n            data-name=\"灰青\">\n            <span>灰青</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #a5a5a5;\" data-value=\"#a5a5a5\"\n            data-dark=\"dark\"\n            data-name=\"鼠\">\n            <span>鼠</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #fbd4d0;\" data-value=\"#fbd4d0\"\n            data-dark=\"light\"\n            data-name=\"虹\">\n            <span>虹</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ffd7b9;\" data-value=\"#ffd7b9\"\n            data-dark=\"light\"\n            data-name=\"落柿\">\n            <span>落柿</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #f9eda6;\" data-value=\"#f9eda6\"\n            data-dark=\"light\"\n            data-name=\"花叶\">\n            <span>花叶</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #d4e9d6;\" data-value=\"#d4e9d6\"\n            data-dark=\"light\"\n            data-name=\"白绿\">\n            <span>白绿</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #c7e6ea;\" data-value=\"#c7e6ea\"\n            data-dark=\"light\"\n            data-name=\"天青\">\n            <span>天青</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #cce0f1;\" data-value=\"#cce0f1\"\n            data-dark=\"light\"\n            data-name=\"天空\">\n            <span>天空</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #dad5e9;\" data-value=\"#dad5e9\"\n            data-dark=\"light\"\n            data-name=\"水晶\">\n            <span>水晶</span>\n    </div>\n\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #7b7f83;\" data-value=\"#7b7f83\"\n            data-dark=\"dark\"\n            data-name=\"薄钝\">\n            <span>薄钝</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #41464b;\" data-value=\"#41464b\"\n            data-dark=\"dark\"\n            data-name=\"墨\">\n            <span>墨</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ee7976;\" data-value=\"#ee7976\"\n            data-dark=\"dark\"\n            data-name=\"甚三红\">\n            <span>甚三红</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #faa573;\" data-value=\"#faa573\"\n            data-dark=\"dark\"\n            data-name=\"珊瑚\">\n            <span>珊瑚</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #e6b322;\" data-value=\"#e6b322\"\n            data-dark=\"dark\"\n            data-name=\"金\">\n            <span>金</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #98c091;\" data-value=\"#98c091\"\n            data-dark=\"dark\"\n            data-name=\"薄青\">\n            <span>薄青</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #79c6cd;\" data-value=\"#79c6cd\"\n            data-dark=\"dark\"\n            data-name=\"白群\">\n            <span>白群</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #6eaad7;\" data-value=\"#6eaad7\"\n            data-dark=\"dark\"\n            data-name=\"薄花\">\n            <span>薄花</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #9c8ec1;\" data-value=\"#9c8ec1\"\n            data-dark=\"dark\"\n            data-name=\"紫苑\">\n            <span>紫苑</span>\n    </div>\n\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #41464b;\" data-value=\"#41464b\"\n            data-dark=\"dark\"\n            data-name=\"石墨\">\n            <span>石墨</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #333333;\" data-value=\"#333333\"\n            data-dark=\"dark\"\n            data-name=\"黑\">\n            <span>黑</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #be1a1d;\" data-value=\"#be1a1d\"\n            data-dark=\"dark\"\n            data-name=\"绯红\">\n            <span>绯红</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #b95514;\" data-value=\"#b95514\"\n            data-dark=\"dark\"\n            data-name=\"棕黄\">\n            <span>棕黄</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ad720e;\" data-value=\"#ad720e\"\n            data-dark=\"dark\"\n            data-name=\"土黄\">\n            <span>土黄</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #1c7231;\" data-value=\"#1c7231\"\n            data-dark=\"dark\"\n            data-name=\"苍翠\">\n            <span>苍翠</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #1c7892;\" data-value=\"#1c7892\"\n            data-dark=\"dark\"\n            data-name=\"孔雀\">\n            <span>孔雀</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #19439c;\" data-value=\"#19439c\"\n            data-dark=\"dark\"\n            data-name=\"琉璃\">\n            <span>琉璃</span>\n    </div>\n    <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #511b78;\" data-value=\"#511b78\"\n            data-dark=\"dark\"\n            data-name=\"青莲\">\n            <span>青莲</span>\n    </div>\n    <div class=\"card_font_color_demo_input_area\">\n        <div class=\"card_font_color_demo_item\" \n            style=\"background-color: #ff9800;\" data-value=\"#ff9800\"\n            data-name=\"自定义\">\n        </div>\n        <input class=\"card_font_color_demo_input\">\n    </div>\n</div>";
      dom_now.empty();
      dom_now.append(html);
      dom_now.find(".card_font_color_demo_item[data-value=\"" + current_color + "\"]").addClass("item_select");
      dom_now.find(".card_font_color_demo_input_area>.card_font_color_demo_item").css({
        "backgroundColor": current_color
      });
      dom_now.find(".card_font_color_demo_input_area>.card_font_color_demo_input").val(current_color);
      return callback;
    };
    $("body").on("click", ".card>.card_font_color", function(evt) {
      var a, b, bl, current_color, dom, dom_now, g, r;
      dom = $(this);
      dom_now = dom.find(".card_font_color_demo");
      if (dom.hasClass("font_color_on")) {
        return dom.removeClass("font_color_on");
      } else {
        dom.addClass("font_color_on");
        current_color = dom.parents(".dom").find(".sections>.section").css("color");
        console.log(current_color);
        b = current_color.match(/\((.+?)\)/g);
        b = b[0].replace("(", "");
        b = b.replace(")", "");
        bl = b.split(",");
        console.log(bl, bl.length);
        if (bl.length === 3) {
          r = (parseInt(bl[0]) << 0).toString(16);
          g = (parseInt(bl[1]) << 0).toString(16);
          b = (parseInt(bl[2]) << 0).toString(16);
          console.log(r, g, b);
          console.log(r.length, g.length, b.length);
          current_color = "#" + r + g + b;
          console.log(current_color);
          if (r.length < 2) {
            r = "0" + r;
          }
          if (g.length < 2) {
            g = "0" + g;
          }
          if (b.length < 2) {
            b = "0" + b;
          }
          console.log(r, g, b);
          current_color = "#" + r + g + b;
          console.log(current_color);
        } else if (bl.length === 4) {
          r = (parseInt(bl[0]) << 0).toString(16);
          g = (parseInt(bl[1]) << 0).toString(16);
          b = (parseInt(bl[2]) << 0).toString(16);
          a = (parseInt(parseFloat(bl[3]) * 255) << 0).toString(16);
          console.log(r.length, g.length, b.length, a.length);
          current_color = "#" + r + g + b + a;
          console.log(current_color);
          if (r.length < 2) {
            r = "0" + r;
          }
          if (g.length < 2) {
            g = "0" + g;
          }
          if (b.length < 2) {
            b = "0" + b;
          }
          if (a.length < 2) {
            a = "0" + a;
          }
          console.log(r, g, b, a);
          current_color = "#" + r + g + b + a;
          console.log(current_color);
        }
        return load_font_color_html(dom_now, current_color, function() {
          return console.log("hello color", current_color);
        });
      }
    });
    $("body").on("click", ".card>.card_font_color>.card_font_color_demo>.card_font_color_demos>.card_font_color_demo_item", function(evt) {
      var all_section, card, color_now, dom, dom_owner, dom_tree, dom_tree_list, html, item_section, j, len;
      color_now = $(this).attr("data-value");
      dom = $(this);
      card = dom.parents(".card");
      card.find(".card_font_color_demos>.card_font_color_demo_item").removeClass("item_select");
      dom.addClass("item_select");
      card.find(".card_font_color_demo_input_area>.card_font_color_demo_item").css({
        "backgroundColor": color_now
      });
      card.find(".card_font_color_demo_input_area>.card_font_color_demo_item").attr("data-value", color_now);
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      all_section = card.find(".section");
      for (j = 0, len = all_section.length; j < len; j++) {
        item_section = all_section[j];
        $(item_section).css("color", color_now);
      }
      send_data_now = true;
      send_data["dom_id"] = card.attr("id");
      html = card.find(".sections").html();
      send_data["text"] = html;
      editing_now(card);
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      if ($(".network_now").length < 1) {
        $("body").append("<div class=\"network_now\">正在编辑</div>");
      }
      update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(card, send_data);
      }, 500);
      evt.preventDefault();
      evt.stopPropagation();
    });
    $("body").on("click", ".card>.card_font_color>.card_font_color_demo>.card_font_color_demos>.card_font_color_demo_input_area", function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
    });
    $("body").on("input propertychange", ".card>.card_font_color>.card_font_color_demo>.card_font_color_demos>.card_font_color_demo_input_area>.card_font_color_demo_input", function(evt) {
      var dom_value;
      dom_value = $(this).val();
      $(".card_font_color_demo_input_area>.card_font_color_demo_item").css({
        "backgroundColor": dom_value
      });
      return $(".card_font_color_demo_input_area>.card_font_color_demo_item").attr("data-value", dom_value);
    });
    $("body").on("click", ".card>.card_font_color>.card_font_color_demo>.card_font_color_demos>.card_font_color_demo_input_area>.card_font_color_demo_item", function(evt) {
      var all_section, card, color_now, dom, dom_owner, dom_tree, dom_tree_list, html, item_section, j, len;
      color_now = $(this).attr("data-value");
      dom = $(this);
      card = dom.parents(".card");
      dom_tree = card.attr("data-tree");
      dom_tree_list = dom_tree.split("_");
      dom_owner = dom_tree_list[dom_tree_list.length - 1];
      dom_current = dom_tree;
      all_section = card.find(".section");
      for (j = 0, len = all_section.length; j < len; j++) {
        item_section = all_section[j];
        $(item_section).css("color", color_now);
      }
      send_data_now = true;
      send_data["dom_id"] = card.attr("id");
      html = card.find(".sections").html();
      send_data["text"] = html;
      editing_now(card);
      if (editing_now_timeout !== null) {
        clearTimeout(update_dom_content_timeout);
      }
      if ($(".network_now").length < 1) {
        $("body").append("<div class=\"network_now\">正在编辑</div>");
      }
      update_dom_content_timeout = setTimeout(function() {
        return update_dom_content(card, send_data);
      }, 500);
      evt.preventDefault();
      evt.stopPropagation();
    });
    root.block_desc_content_old = $(".block_desc_content").val();
    $("body").on("input propertychange", ".block_desc_content", function(evt) {
      var block_desc_content_now;
      console.log($(".block_desc_content").val());
      block_desc_content_now = $(".block_desc_content").val();
      if (block_desc_content_old === block_desc_content_now) {
        console.log("same");
        return $(".block_desc_content_unsave").addClass("hide");
      } else {
        console.log("not same");
        return $(".block_desc_content_unsave").removeClass("hide");
      }
    });
    $("body").on("click", ".block_desc_content_save", function(evt) {
      var desc, dom;
      $(this).text("saving");
      desc = $(".block_desc_content").val();
      send_data["desc"] = desc;
      dom = $(this);
      editing_now(dom);
      if (editing_now_timeout !== null) {
        clearTimeout(update_desc_timeout);
      }
      return update_desc_timeout = setTimeout(function() {
        return update_desc(send_data);
      }, 500);
    });
    $("body").on("click", ".card>.card_copy", function(evt) {
      var card, card_more_selected_item, card_more_selected_items, current_copy, dom, dom_id, dom_id_item, dom_id_item_card, j, len;
      console.log("card_copy");
      dom = $(this);
      card = dom.parents(".card.dom");
      dom_id = card.attr("id");
      if (card.find(".card_more_select").hasClass("card_more_selected")) {
        current_copy = [];
        card_more_selected_items = $(".card_more_selected");
        for (j = 0, len = card_more_selected_items.length; j < len; j++) {
          card_more_selected_item = card_more_selected_items[j];
          dom_id_item_card = $(card_more_selected_item).parents(".card.dom");
          dom_id_item = dom_id_item_card.attr("id");
          current_copy.push("COPYDOM//" + BLOCK_ID + "," + dom_id_item);
        }
      } else {
        current_copy = ["COPYDOM//" + BLOCK_ID + "," + dom_id];
      }
      current_copy = JSON.stringify(current_copy);
      if (dom.hasClass("card_copy_select")) {
        dom.removeClass("card_copy_select");
        return localStorage.removeItem("current_copy");
      } else {
        $(".card_copy").removeClass("card_copy_select");
        dom.addClass("card_copy_select");
        return localStorage.setItem("current_copy", current_copy);
      }
    });
    $("body").on("click", ".card>.card_more_select", function(evt) {
      var card, dom;
      console.log("card_more_select");
      dom = $(this);
      card = dom.parents(".card.dom");
      if (dom.hasClass("card_more_selected")) {
        return dom.removeClass("card_more_selected");
      } else {
        dom.addClass("card_more_selected");
        return $(".terminal_console").val((card.attr("id")) + "," + (card.position().left) + "," + (card.position().top));
      }
    });
    latest_current_copy_now_num = "...";
    $(window).on("mousemove touchmove", function(evt) {
      var current_copy_now, current_copy_now_num, current_copy_save_fix, e;
      current_copy_now = localStorage.getItem("current_copy");
      if (current_copy_now !== null) {
        if (!$(".add_btn_domcopy").hasClass("has_copy")) {
          $(".add_btn_domcopy").addClass("has_copy");
        }
        try {
          current_copy_now = JSON.parse(current_copy_now);
        } catch (error) {
          e = error;
          current_copy_now = [current_copy_now];
          current_copy_save_fix = JSON.stringify(current_copy_now);
          localStorage.setItem("current_copy", current_copy_save_fix);
        }
        current_copy_now_num = current_copy_now.length;
        if (current_copy_now_num > 100) {
          current_copy_now_num = "...";
        }
        if (latest_current_copy_now_num !== current_copy_now_num) {
          latest_current_copy_now_num = current_copy_now_num;
          return $("button.add.add_btn.add_btn_domcopy.has_copy").attr("data-value", "" + current_copy_now_num);
        }
      } else {
        return $(".add_btn_domcopy").removeClass("has_copy");
      }
    });
    get_more_select_base = {};
    root.get_more_select = function(nochangedom) {
      var card, card_id, card_selected, j, len, nochangedom_id, ref, results;
      if (!nochangedom.find(".card_more_select").hasClass("card_more_selected")) {
        return;
      }
      get_more_select_base = {};
      nochangedom_id = nochangedom.attr("id");
      ref = $(".card_more_selected");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        card_selected = ref[j];
        card = $(card_selected).parents(".card.dom");
        card_id = card.attr("id");
        if (card_id === nochangedom_id) {
          continue;
        }
        results.push(get_more_select_base[card_id] = {
          "left": parseInt($(card).css("left")),
          "top": parseInt($(card).css("top"))
        });
      }
      return results;
    };
    root.set_more_select = function(nochangedom, dlt_x, dlt_y) {
      var card, card_id, card_selected, j, len, nochangedom_id, ref, results;
      if (!nochangedom.find(".card_more_select").hasClass("card_more_selected")) {
        return;
      }
      nochangedom_id = nochangedom.attr("id");
      ref = $(".card_more_selected");
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        card_selected = ref[j];
        card = $(card_selected).parents(".card.dom");
        card_id = card.attr("id");
        if (card_id === nochangedom_id) {
          continue;
        }
        if (get_more_select_base[card_id] === void 0) {
          continue;
        }
        results.push(card.css({
          "left": (get_more_select_base[card_id]["left"] + dlt_x) + "px",
          "top": (get_more_select_base[card_id]["top"] + dlt_y) + "px"
        }));
      }
      return results;
    };
    root.send_more_select = function(nochangedom) {
      var card, card_id, card_selected, j, len, nochangedom_id, ref, updates, uuid_now;
      console.log(nochangedom);
      if (!nochangedom.find(".card_more_select").hasClass("card_more_selected")) {
        return;
      }
      nochangedom_id = nochangedom.attr("id");
      updates = [];
      ref = $(".card_more_selected");
      for (j = 0, len = ref.length; j < len; j++) {
        card_selected = ref[j];
        card = $(card_selected).parents(".card.dom");
        card_id = card.attr("id");
        if (card_id === nochangedom_id) {
          continue;
        }
        updates.push({
          "dom_id": card_id,
          "x": card.position().left,
          "y": card.position().top
        });
      }
      uuid_now = uuid2(6, null);
      if (updates.length === 0) {
        return;
      }
      uuid2s.push(uuid_now);
      return $.ajax({
        url: "/api/page/update_doms",
        data: {
          block_id: BLOCK_ID,
          updates: JSON.stringify(updates),
          dom_content: uuid_now
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          return console.log(JSON.stringify(data));
        },
        error: function(data) {
          return console.log(data);
        }
      });
    };
    block_comment_entities_add_now = false;
    $("body").on("click", ".block_comment_entities_add", function(evt) {
      var uuid_now;
      if (block_comment_entities_add_now) {
        alert("waiting");
        return;
      }
      $(".block_comment_entities_add").text("waiting");
      block_comment_entities_add_now = true;
      uuid_now = uuid2(6, null);
      uuid2s.push(uuid_now);
      return $.ajax({
        url: "/api/page/add_comment",
        data: {
          block_id: BLOCK_ID,
          dom_content: uuid_now
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info === "ok") {
            $(".block_comment_entities_add").text("success");
            $(".comment_entities").append("<div class=\"comment_entity_line\">\n    <p>block: " + data.comment_entity + "</p>\n    <div class=\"comment_entity_line_tools\">\n        <div class=\"load_card\">Load·载入</div>\n        <div class=\"manager\">Manage·管理</div>\n    </div>\n</div>");
            return setTimeout(function() {
              $(".block_comment_entities_add").text("add");
              return block_comment_entities_add_now = false;
            }, 1000);
          }
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    root.symbol_window_select_action = function(x1, y1, x2, y2) {
      var action_ids, card, cards, j, len, select_card_ids, select_card_ids_has, x0, y0;
      cards = $(".card.dom");
      select_card_ids = [];
      for (j = 0, len = cards.length; j < len; j++) {
        card = cards[j];
        x0 = $(card).position().left;
        y0 = $(card).position().top;
        if (x0 >= x1 && x0 <= x2) {
          if (y0 >= y1 && y0 <= y2) {
            select_card_ids.push($(card).attr("id"));
            select_card_ids_has = true;
          }
        }
      }
      action_ids = "#" + (select_card_ids.join(",#"));
      $(".card_more_selected").removeClass("card_more_selected");
      $(action_ids).find(".card_more_select").click();
      root.symbol_window_select_allow = false;
      $(".add_btn_area_select").removeClass("show");
      return $(".main_area>.test_select").remove();
    };
    $("body").on("keyup", ".terminal_console", function(evt) {
      var dom_id, e, ref, terminal_console_action, terminal_console_action_error, terminal_console_action_list, updates, uuid_now, x, y;
      if (((ref = evt.keyCode) === 13) && evt.ctrlKey === true) {
        terminal_console_action = $(this).val();
        terminal_console_action_list = terminal_console_action.split(",");
        terminal_console_action_error = false;
        if (terminal_console_action_list.length === 3) {
          dom_id = terminal_console_action_list[0];
          try {
            x = parseInt(terminal_console_action_list[1]);
          } catch (error) {
            e = error;
            terminal_console_action_error = true;
          }
          try {
            y = parseInt(terminal_console_action_list[2]);
          } catch (error) {
            e = error;
            terminal_console_action_error = true;
          }
        }
        if (terminal_console_action_error) {
          alert("error");
          return;
        }
        console.log(dom_id, x, y);
        $("#" + dom_id).animate({
          "left": x,
          "top": y
        });
        updates = [];
        updates.push({
          "dom_id": dom_id,
          "x": x,
          "y": y
        });
        uuid_now = uuid2(6, null);
        if (updates.length === 0) {
          return;
        }
        uuid2s.push(uuid_now);
        return $.ajax({
          url: "/api/page/update_doms",
          data: {
            block_id: BLOCK_ID,
            updates: JSON.stringify(updates),
            dom_content: uuid_now
          },
          dataType: 'json',
          type: 'POST',
          success: function(data) {
            return console.log(JSON.stringify(data));
          },
          error: function(data) {
            return console.log(data);
          }
        });
      }
    });
    $("body").on("click", ".page_agora_btn.join_room", function(evt) {
      return $.ajax({
        url: "/api/page/agora/get_token",
        data: {
          aim_id: BLOCK_ID,
          device_user: Hs.DEVICE_USER
        },
        dataType: 'json',
        type: 'POST',
        success: function(data) {
          console.log(JSON.stringify(data));
          if (data.info === "ok") {
            $("#appid").val(data.appid);
            $("#token").val(data.token);
            $("#channel").val(BLOCK_ID);
            $("#uid").val(Hs.DEVICE_USER);
            return $("#join").click();
          }
        },
        error: function(data) {
          return console.log(data);
        }
      });
    });
    return $("body").on("click", ".page_agora_btn.leave_room", function(evt) {
      return $("#leave").click();
    });
  });

}).call(this);
