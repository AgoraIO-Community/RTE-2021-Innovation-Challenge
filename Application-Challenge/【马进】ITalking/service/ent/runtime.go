// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"italking.tomotoes.com/m/v1/ent/notification"
	"italking.tomotoes.com/m/v1/ent/reservation"
	"italking.tomotoes.com/m/v1/ent/room"
	"italking.tomotoes.com/m/v1/ent/schema"
	"italking.tomotoes.com/m/v1/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	notificationFields := schema.Notification{}.Fields()
	_ = notificationFields
	// notificationDescContent is the schema descriptor for content field.
	notificationDescContent := notificationFields[1].Descriptor()
	// notification.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	notification.ContentValidator = func() func(string) error {
		validators := notificationDescContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// notificationDescCreatedAt is the schema descriptor for created_at field.
	notificationDescCreatedAt := notificationFields[3].Descriptor()
	// notification.DefaultCreatedAt holds the default value on creation for the created_at field.
	notification.DefaultCreatedAt = notificationDescCreatedAt.Default.(func() time.Time)
	// notificationDescUpdatedAt is the schema descriptor for updated_at field.
	notificationDescUpdatedAt := notificationFields[4].Descriptor()
	// notification.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	notification.DefaultUpdatedAt = notificationDescUpdatedAt.Default.(func() time.Time)
	// notification.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	notification.UpdateDefaultUpdatedAt = notificationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// notificationDescID is the schema descriptor for id field.
	notificationDescID := notificationFields[0].Descriptor()
	// notification.DefaultID holds the default value on creation for the id field.
	notification.DefaultID = notificationDescID.Default.(func() string)
	// notification.IDValidator is a validator for the "id" field. It is called by the builders before save.
	notification.IDValidator = notificationDescID.Validators[0].(func(string) error)
	reservationFields := schema.Reservation{}.Fields()
	_ = reservationFields
	// reservationDescName is the schema descriptor for name field.
	reservationDescName := reservationFields[1].Descriptor()
	// reservation.NameValidator is a validator for the "name" field. It is called by the builders before save.
	reservation.NameValidator = func() func(string) error {
		validators := reservationDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// reservationDescDescription is the schema descriptor for description field.
	reservationDescDescription := reservationFields[2].Descriptor()
	// reservation.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	reservation.DescriptionValidator = reservationDescDescription.Validators[0].(func(string) error)
	// reservationDescTime is the schema descriptor for time field.
	reservationDescTime := reservationFields[3].Descriptor()
	// reservation.TimeValidator is a validator for the "time" field. It is called by the builders before save.
	reservation.TimeValidator = reservationDescTime.Validators[0].(func(int) error)
	// reservationDescCreatedAt is the schema descriptor for created_at field.
	reservationDescCreatedAt := reservationFields[4].Descriptor()
	// reservation.DefaultCreatedAt holds the default value on creation for the created_at field.
	reservation.DefaultCreatedAt = reservationDescCreatedAt.Default.(func() time.Time)
	// reservationDescUpdatedAt is the schema descriptor for updated_at field.
	reservationDescUpdatedAt := reservationFields[5].Descriptor()
	// reservation.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	reservation.DefaultUpdatedAt = reservationDescUpdatedAt.Default.(func() time.Time)
	// reservation.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	reservation.UpdateDefaultUpdatedAt = reservationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// reservationDescID is the schema descriptor for id field.
	reservationDescID := reservationFields[0].Descriptor()
	// reservation.DefaultID holds the default value on creation for the id field.
	reservation.DefaultID = reservationDescID.Default.(func() string)
	// reservation.IDValidator is a validator for the "id" field. It is called by the builders before save.
	reservation.IDValidator = reservationDescID.Validators[0].(func(string) error)
	roomFields := schema.Room{}.Fields()
	_ = roomFields
	// roomDescName is the schema descriptor for name field.
	roomDescName := roomFields[1].Descriptor()
	// room.NameValidator is a validator for the "name" field. It is called by the builders before save.
	room.NameValidator = func() func(string) error {
		validators := roomDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roomDescDescription is the schema descriptor for description field.
	roomDescDescription := roomFields[2].Descriptor()
	// room.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	room.DescriptionValidator = roomDescDescription.Validators[0].(func(string) error)
	// roomDescCreatedAt is the schema descriptor for created_at field.
	roomDescCreatedAt := roomFields[5].Descriptor()
	// room.DefaultCreatedAt holds the default value on creation for the created_at field.
	room.DefaultCreatedAt = roomDescCreatedAt.Default.(func() time.Time)
	// roomDescUpdatedAt is the schema descriptor for updated_at field.
	roomDescUpdatedAt := roomFields[6].Descriptor()
	// room.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	room.DefaultUpdatedAt = roomDescUpdatedAt.Default.(func() time.Time)
	// room.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	room.UpdateDefaultUpdatedAt = roomDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roomDescID is the schema descriptor for id field.
	roomDescID := roomFields[0].Descriptor()
	// room.IDValidator is a validator for the "id" field. It is called by the builders before save.
	room.IDValidator = func() func(string) error {
		validators := roomDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescDescription is the schema descriptor for description field.
	userDescDescription := userFields[3].Descriptor()
	// user.DefaultDescription holds the default value on creation for the description field.
	user.DefaultDescription = userDescDescription.Default.(string)
	// user.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	user.DescriptionValidator = userDescDescription.Validators[0].(func(string) error)
	// userDescSpeaking is the schema descriptor for speaking field.
	userDescSpeaking := userFields[4].Descriptor()
	// user.DefaultSpeaking holds the default value on creation for the speaking field.
	user.DefaultSpeaking = userDescSpeaking.Default.(bool)
	// userDescUnread is the schema descriptor for unread field.
	userDescUnread := userFields[5].Descriptor()
	// user.DefaultUnread holds the default value on creation for the unread field.
	user.DefaultUnread = userDescUnread.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() string)
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
