// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"italking.tomotoes.com/m/v1/ent/notification"
	"italking.tomotoes.com/m/v1/ent/predicate"
	"italking.tomotoes.com/m/v1/ent/reservation"
	"italking.tomotoes.com/m/v1/ent/room"
	"italking.tomotoes.com/m/v1/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNotification = "Notification"
	TypeReservation  = "Reservation"
	TypeRoom         = "Room"
	TypeUser         = "User"
)

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op              Op
	typ             string
	id              *string
	content         *string
	_type           *notification.Type
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	sender          *string
	clearedsender   bool
	receiver        *string
	clearedreceiver bool
	done            bool
	oldValue        func(context.Context) (*Notification, error)
	predicates      []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id string) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notification entities.
func (m *NotificationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *NotificationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContent sets the "content" field.
func (m *NotificationMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *NotificationMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *NotificationMutation) ResetContent() {
	m.content = nil
}

// SetType sets the "type" field.
func (m *NotificationMutation) SetType(n notification.Type) {
	m._type = &n
}

// GetType returns the value of the "type" field in the mutation.
func (m *NotificationMutation) GetType() (r notification.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldType(ctx context.Context) (v notification.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NotificationMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotificationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotificationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotificationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *NotificationMutation) SetSenderID(id string) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *NotificationMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *NotificationMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *NotificationMutation) SenderID() (id string, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) SenderIDs() (ids []string) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *NotificationMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetReceiverID sets the "receiver" edge to the User entity by id.
func (m *NotificationMutation) SetReceiverID(id string) {
	m.receiver = &id
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (m *NotificationMutation) ClearReceiver() {
	m.clearedreceiver = true
}

// ReceiverCleared reports if the "receiver" edge to the User entity was cleared.
func (m *NotificationMutation) ReceiverCleared() bool {
	return m.clearedreceiver
}

// ReceiverID returns the "receiver" edge ID in the mutation.
func (m *NotificationMutation) ReceiverID() (id string, exists bool) {
	if m.receiver != nil {
		return *m.receiver, true
	}
	return
}

// ReceiverIDs returns the "receiver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiverID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) ReceiverIDs() (ids []string) {
	if id := m.receiver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiver resets all changes to the "receiver" edge.
func (m *NotificationMutation) ResetReceiver() {
	m.receiver = nil
	m.clearedreceiver = false
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.content != nil {
		fields = append(fields, notification.FieldContent)
	}
	if m._type != nil {
		fields = append(fields, notification.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, notification.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notification.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldContent:
		return m.Content()
	case notification.FieldType:
		return m.GetType()
	case notification.FieldCreatedAt:
		return m.CreatedAt()
	case notification.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldContent:
		return m.OldContent(ctx)
	case notification.FieldType:
		return m.OldType(ctx)
	case notification.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notification.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case notification.FieldType:
		v, ok := value.(notification.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case notification.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notification.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldContent:
		m.ResetContent()
		return nil
	case notification.FieldType:
		m.ResetType()
		return nil
	case notification.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notification.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sender != nil {
		edges = append(edges, notification.EdgeSender)
	}
	if m.receiver != nil {
		edges = append(edges, notification.EdgeReceiver)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeReceiver:
		if id := m.receiver; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsender {
		edges = append(edges, notification.EdgeSender)
	}
	if m.clearedreceiver {
		edges = append(edges, notification.EdgeReceiver)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeSender:
		return m.clearedsender
	case notification.EdgeReceiver:
		return m.clearedreceiver
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	case notification.EdgeSender:
		m.ClearSender()
		return nil
	case notification.EdgeReceiver:
		m.ClearReceiver()
		return nil
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeSender:
		m.ResetSender()
		return nil
	case notification.EdgeReceiver:
		m.ResetReceiver()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// ReservationMutation represents an operation that mutates the Reservation nodes in the graph.
type ReservationMutation struct {
	config
	op             Op
	typ            string
	id             *string
	name           *string
	description    *string
	time           *int
	addtime        *int
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	creator        *string
	clearedcreator bool
	done           bool
	oldValue       func(context.Context) (*Reservation, error)
	predicates     []predicate.Reservation
}

var _ ent.Mutation = (*ReservationMutation)(nil)

// reservationOption allows management of the mutation configuration using functional options.
type reservationOption func(*ReservationMutation)

// newReservationMutation creates new mutation for the Reservation entity.
func newReservationMutation(c config, op Op, opts ...reservationOption) *ReservationMutation {
	m := &ReservationMutation{
		config:        c,
		op:            op,
		typ:           TypeReservation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReservationID sets the ID field of the mutation.
func withReservationID(id string) reservationOption {
	return func(m *ReservationMutation) {
		var (
			err   error
			once  sync.Once
			value *Reservation
		)
		m.oldValue = func(ctx context.Context) (*Reservation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reservation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReservation sets the old Reservation of the mutation.
func withReservation(node *Reservation) reservationOption {
	return func(m *ReservationMutation) {
		m.oldValue = func(context.Context) (*Reservation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReservationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReservationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reservation entities.
func (m *ReservationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ReservationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ReservationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ReservationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ReservationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ReservationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ReservationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ReservationMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[reservation.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ReservationMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[reservation.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ReservationMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, reservation.FieldDescription)
}

// SetTime sets the "time" field.
func (m *ReservationMutation) SetTime(i int) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *ReservationMutation) Time() (r int, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *ReservationMutation) AddTime(i int) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *ReservationMutation) AddedTime() (r int, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *ReservationMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ReservationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReservationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReservationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReservationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReservationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Reservation entity.
// If the Reservation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReservationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReservationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *ReservationMutation) SetCreatorID(id string) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *ReservationMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *ReservationMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *ReservationMutation) CreatorID() (id string, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *ReservationMutation) CreatorIDs() (ids []string) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *ReservationMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Op returns the operation name.
func (m *ReservationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reservation).
func (m *ReservationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReservationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, reservation.FieldName)
	}
	if m.description != nil {
		fields = append(fields, reservation.FieldDescription)
	}
	if m.time != nil {
		fields = append(fields, reservation.FieldTime)
	}
	if m.created_at != nil {
		fields = append(fields, reservation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reservation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReservationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reservation.FieldName:
		return m.Name()
	case reservation.FieldDescription:
		return m.Description()
	case reservation.FieldTime:
		return m.Time()
	case reservation.FieldCreatedAt:
		return m.CreatedAt()
	case reservation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReservationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reservation.FieldName:
		return m.OldName(ctx)
	case reservation.FieldDescription:
		return m.OldDescription(ctx)
	case reservation.FieldTime:
		return m.OldTime(ctx)
	case reservation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reservation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Reservation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReservationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reservation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case reservation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case reservation.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case reservation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reservation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Reservation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReservationMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, reservation.FieldTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReservationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reservation.FieldTime:
		return m.AddedTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReservationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reservation.FieldTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	}
	return fmt.Errorf("unknown Reservation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReservationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(reservation.FieldDescription) {
		fields = append(fields, reservation.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReservationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReservationMutation) ClearField(name string) error {
	switch name {
	case reservation.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Reservation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReservationMutation) ResetField(name string) error {
	switch name {
	case reservation.FieldName:
		m.ResetName()
		return nil
	case reservation.FieldDescription:
		m.ResetDescription()
		return nil
	case reservation.FieldTime:
		m.ResetTime()
		return nil
	case reservation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reservation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Reservation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReservationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.creator != nil {
		edges = append(edges, reservation.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReservationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reservation.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReservationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReservationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReservationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcreator {
		edges = append(edges, reservation.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReservationMutation) EdgeCleared(name string) bool {
	switch name {
	case reservation.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReservationMutation) ClearEdge(name string) error {
	switch name {
	case reservation.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Reservation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReservationMutation) ResetEdge(name string) error {
	switch name {
	case reservation.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Reservation edge %s", name)
}

// RoomMutation represents an operation that mutates the Room nodes in the graph.
type RoomMutation struct {
	config
	op                Op
	typ               string
	id                *string
	name              *string
	description       *string
	announcement      *string
	_type             *room.Type
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	spectators        map[string]struct{}
	removedspectators map[string]struct{}
	clearedspectators bool
	speakers          map[string]struct{}
	removedspeakers   map[string]struct{}
	clearedspeakers   bool
	creator           *string
	clearedcreator    bool
	done              bool
	oldValue          func(context.Context) (*Room, error)
	predicates        []predicate.Room
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows management of the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for the Room entity.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the ID field of the mutation.
func withRoomID(id string) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Room entities.
func (m *RoomMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RoomMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RoomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoomMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RoomMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RoomMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *RoomMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[room.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *RoomMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[room.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *RoomMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, room.FieldDescription)
}

// SetAnnouncement sets the "announcement" field.
func (m *RoomMutation) SetAnnouncement(s string) {
	m.announcement = &s
}

// Announcement returns the value of the "announcement" field in the mutation.
func (m *RoomMutation) Announcement() (r string, exists bool) {
	v := m.announcement
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncement returns the old "announcement" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldAnnouncement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAnnouncement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAnnouncement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncement: %w", err)
	}
	return oldValue.Announcement, nil
}

// ClearAnnouncement clears the value of the "announcement" field.
func (m *RoomMutation) ClearAnnouncement() {
	m.announcement = nil
	m.clearedFields[room.FieldAnnouncement] = struct{}{}
}

// AnnouncementCleared returns if the "announcement" field was cleared in this mutation.
func (m *RoomMutation) AnnouncementCleared() bool {
	_, ok := m.clearedFields[room.FieldAnnouncement]
	return ok
}

// ResetAnnouncement resets all changes to the "announcement" field.
func (m *RoomMutation) ResetAnnouncement() {
	m.announcement = nil
	delete(m.clearedFields, room.FieldAnnouncement)
}

// SetType sets the "type" field.
func (m *RoomMutation) SetType(r room.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *RoomMutation) GetType() (r room.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldType(ctx context.Context) (v room.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RoomMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RoomMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoomMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoomMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoomMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoomMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoomMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSpectatorIDs adds the "spectators" edge to the User entity by ids.
func (m *RoomMutation) AddSpectatorIDs(ids ...string) {
	if m.spectators == nil {
		m.spectators = make(map[string]struct{})
	}
	for i := range ids {
		m.spectators[ids[i]] = struct{}{}
	}
}

// ClearSpectators clears the "spectators" edge to the User entity.
func (m *RoomMutation) ClearSpectators() {
	m.clearedspectators = true
}

// SpectatorsCleared reports if the "spectators" edge to the User entity was cleared.
func (m *RoomMutation) SpectatorsCleared() bool {
	return m.clearedspectators
}

// RemoveSpectatorIDs removes the "spectators" edge to the User entity by IDs.
func (m *RoomMutation) RemoveSpectatorIDs(ids ...string) {
	if m.removedspectators == nil {
		m.removedspectators = make(map[string]struct{})
	}
	for i := range ids {
		m.removedspectators[ids[i]] = struct{}{}
	}
}

// RemovedSpectators returns the removed IDs of the "spectators" edge to the User entity.
func (m *RoomMutation) RemovedSpectatorsIDs() (ids []string) {
	for id := range m.removedspectators {
		ids = append(ids, id)
	}
	return
}

// SpectatorsIDs returns the "spectators" edge IDs in the mutation.
func (m *RoomMutation) SpectatorsIDs() (ids []string) {
	for id := range m.spectators {
		ids = append(ids, id)
	}
	return
}

// ResetSpectators resets all changes to the "spectators" edge.
func (m *RoomMutation) ResetSpectators() {
	m.spectators = nil
	m.clearedspectators = false
	m.removedspectators = nil
}

// AddSpeakerIDs adds the "speakers" edge to the User entity by ids.
func (m *RoomMutation) AddSpeakerIDs(ids ...string) {
	if m.speakers == nil {
		m.speakers = make(map[string]struct{})
	}
	for i := range ids {
		m.speakers[ids[i]] = struct{}{}
	}
}

// ClearSpeakers clears the "speakers" edge to the User entity.
func (m *RoomMutation) ClearSpeakers() {
	m.clearedspeakers = true
}

// SpeakersCleared reports if the "speakers" edge to the User entity was cleared.
func (m *RoomMutation) SpeakersCleared() bool {
	return m.clearedspeakers
}

// RemoveSpeakerIDs removes the "speakers" edge to the User entity by IDs.
func (m *RoomMutation) RemoveSpeakerIDs(ids ...string) {
	if m.removedspeakers == nil {
		m.removedspeakers = make(map[string]struct{})
	}
	for i := range ids {
		m.removedspeakers[ids[i]] = struct{}{}
	}
}

// RemovedSpeakers returns the removed IDs of the "speakers" edge to the User entity.
func (m *RoomMutation) RemovedSpeakersIDs() (ids []string) {
	for id := range m.removedspeakers {
		ids = append(ids, id)
	}
	return
}

// SpeakersIDs returns the "speakers" edge IDs in the mutation.
func (m *RoomMutation) SpeakersIDs() (ids []string) {
	for id := range m.speakers {
		ids = append(ids, id)
	}
	return
}

// ResetSpeakers resets all changes to the "speakers" edge.
func (m *RoomMutation) ResetSpeakers() {
	m.speakers = nil
	m.clearedspeakers = false
	m.removedspeakers = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *RoomMutation) SetCreatorID(id string) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *RoomMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *RoomMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *RoomMutation) CreatorID() (id string, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) CreatorIDs() (ids []string) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *RoomMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, room.FieldName)
	}
	if m.description != nil {
		fields = append(fields, room.FieldDescription)
	}
	if m.announcement != nil {
		fields = append(fields, room.FieldAnnouncement)
	}
	if m._type != nil {
		fields = append(fields, room.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, room.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, room.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldName:
		return m.Name()
	case room.FieldDescription:
		return m.Description()
	case room.FieldAnnouncement:
		return m.Announcement()
	case room.FieldType:
		return m.GetType()
	case room.FieldCreatedAt:
		return m.CreatedAt()
	case room.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldName:
		return m.OldName(ctx)
	case room.FieldDescription:
		return m.OldDescription(ctx)
	case room.FieldAnnouncement:
		return m.OldAnnouncement(ctx)
	case room.FieldType:
		return m.OldType(ctx)
	case room.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case room.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case room.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case room.FieldAnnouncement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncement(v)
		return nil
	case room.FieldType:
		v, ok := value.(room.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case room.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case room.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(room.FieldDescription) {
		fields = append(fields, room.FieldDescription)
	}
	if m.FieldCleared(room.FieldAnnouncement) {
		fields = append(fields, room.FieldAnnouncement)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	switch name {
	case room.FieldDescription:
		m.ClearDescription()
		return nil
	case room.FieldAnnouncement:
		m.ClearAnnouncement()
		return nil
	}
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldName:
		m.ResetName()
		return nil
	case room.FieldDescription:
		m.ResetDescription()
		return nil
	case room.FieldAnnouncement:
		m.ResetAnnouncement()
		return nil
	case room.FieldType:
		m.ResetType()
		return nil
	case room.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case room.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.spectators != nil {
		edges = append(edges, room.EdgeSpectators)
	}
	if m.speakers != nil {
		edges = append(edges, room.EdgeSpeakers)
	}
	if m.creator != nil {
		edges = append(edges, room.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeSpectators:
		ids := make([]ent.Value, 0, len(m.spectators))
		for id := range m.spectators {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeSpeakers:
		ids := make([]ent.Value, 0, len(m.speakers))
		for id := range m.speakers {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedspectators != nil {
		edges = append(edges, room.EdgeSpectators)
	}
	if m.removedspeakers != nil {
		edges = append(edges, room.EdgeSpeakers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeSpectators:
		ids := make([]ent.Value, 0, len(m.removedspectators))
		for id := range m.removedspectators {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeSpeakers:
		ids := make([]ent.Value, 0, len(m.removedspeakers))
		for id := range m.removedspeakers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedspectators {
		edges = append(edges, room.EdgeSpectators)
	}
	if m.clearedspeakers {
		edges = append(edges, room.EdgeSpeakers)
	}
	if m.clearedcreator {
		edges = append(edges, room.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeSpectators:
		return m.clearedspectators
	case room.EdgeSpeakers:
		return m.clearedspeakers
	case room.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeSpectators:
		m.ResetSpectators()
		return nil
	case room.EdgeSpeakers:
		m.ResetSpeakers()
		return nil
	case room.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                           Op
	typ                          string
	id                           *string
	name                         *string
	password                     *string
	description                  *string
	speaking                     *bool
	unread                       *bool
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	followers                    map[string]struct{}
	removedfollowers             map[string]struct{}
	clearedfollowers             bool
	followings                   map[string]struct{}
	removedfollowings            map[string]struct{}
	clearedfollowings            bool
	room                         *string
	clearedroom                  bool
	host                         *string
	clearedhost                  bool
	manage                       map[string]struct{}
	removedmanage                map[string]struct{}
	clearedmanage                bool
	sendNotifications            map[string]struct{}
	removedsendNotifications     map[string]struct{}
	clearedsendNotifications     bool
	receivedNotifications        map[string]struct{}
	removedreceivedNotifications map[string]struct{}
	clearedreceivedNotifications bool
	bookRooms                    map[string]struct{}
	removedbookRooms             map[string]struct{}
	clearedbookRooms             bool
	done                         bool
	oldValue                     func(context.Context) (*User, error)
	predicates                   []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetDescription sets the "description" field.
func (m *UserMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *UserMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[user.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *UserMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[user.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *UserMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, user.FieldDescription)
}

// SetSpeaking sets the "speaking" field.
func (m *UserMutation) SetSpeaking(b bool) {
	m.speaking = &b
}

// Speaking returns the value of the "speaking" field in the mutation.
func (m *UserMutation) Speaking() (r bool, exists bool) {
	v := m.speaking
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeaking returns the old "speaking" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSpeaking(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSpeaking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSpeaking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeaking: %w", err)
	}
	return oldValue.Speaking, nil
}

// ResetSpeaking resets all changes to the "speaking" field.
func (m *UserMutation) ResetSpeaking() {
	m.speaking = nil
}

// SetUnread sets the "unread" field.
func (m *UserMutation) SetUnread(b bool) {
	m.unread = &b
}

// Unread returns the value of the "unread" field in the mutation.
func (m *UserMutation) Unread() (r bool, exists bool) {
	v := m.unread
	if v == nil {
		return
	}
	return *v, true
}

// OldUnread returns the old "unread" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUnread(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnread is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnread requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnread: %w", err)
	}
	return oldValue.Unread, nil
}

// ResetUnread resets all changes to the "unread" field.
func (m *UserMutation) ResetUnread() {
	m.unread = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...string) {
	if m.followers == nil {
		m.followers = make(map[string]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...string) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []string) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []string) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "followings" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...string) {
	if m.followings == nil {
		m.followings = make(map[string]struct{})
	}
	for i := range ids {
		m.followings[ids[i]] = struct{}{}
	}
}

// ClearFollowings clears the "followings" edge to the User entity.
func (m *UserMutation) ClearFollowings() {
	m.clearedfollowings = true
}

// FollowingsCleared reports if the "followings" edge to the User entity was cleared.
func (m *UserMutation) FollowingsCleared() bool {
	return m.clearedfollowings
}

// RemoveFollowingIDs removes the "followings" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...string) {
	if m.removedfollowings == nil {
		m.removedfollowings = make(map[string]struct{})
	}
	for i := range ids {
		m.removedfollowings[ids[i]] = struct{}{}
	}
}

// RemovedFollowings returns the removed IDs of the "followings" edge to the User entity.
func (m *UserMutation) RemovedFollowingsIDs() (ids []string) {
	for id := range m.removedfollowings {
		ids = append(ids, id)
	}
	return
}

// FollowingsIDs returns the "followings" edge IDs in the mutation.
func (m *UserMutation) FollowingsIDs() (ids []string) {
	for id := range m.followings {
		ids = append(ids, id)
	}
	return
}

// ResetFollowings resets all changes to the "followings" edge.
func (m *UserMutation) ResetFollowings() {
	m.followings = nil
	m.clearedfollowings = false
	m.removedfollowings = nil
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *UserMutation) SetRoomID(id string) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *UserMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *UserMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *UserMutation) RoomID() (id string, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *UserMutation) RoomIDs() (ids []string) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *UserMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetHostID sets the "host" edge to the Room entity by id.
func (m *UserMutation) SetHostID(id string) {
	m.host = &id
}

// ClearHost clears the "host" edge to the Room entity.
func (m *UserMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the Room entity was cleared.
func (m *UserMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *UserMutation) HostID() (id string, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *UserMutation) HostIDs() (ids []string) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *UserMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// AddManageIDs adds the "manage" edge to the Room entity by ids.
func (m *UserMutation) AddManageIDs(ids ...string) {
	if m.manage == nil {
		m.manage = make(map[string]struct{})
	}
	for i := range ids {
		m.manage[ids[i]] = struct{}{}
	}
}

// ClearManage clears the "manage" edge to the Room entity.
func (m *UserMutation) ClearManage() {
	m.clearedmanage = true
}

// ManageCleared reports if the "manage" edge to the Room entity was cleared.
func (m *UserMutation) ManageCleared() bool {
	return m.clearedmanage
}

// RemoveManageIDs removes the "manage" edge to the Room entity by IDs.
func (m *UserMutation) RemoveManageIDs(ids ...string) {
	if m.removedmanage == nil {
		m.removedmanage = make(map[string]struct{})
	}
	for i := range ids {
		m.removedmanage[ids[i]] = struct{}{}
	}
}

// RemovedManage returns the removed IDs of the "manage" edge to the Room entity.
func (m *UserMutation) RemovedManageIDs() (ids []string) {
	for id := range m.removedmanage {
		ids = append(ids, id)
	}
	return
}

// ManageIDs returns the "manage" edge IDs in the mutation.
func (m *UserMutation) ManageIDs() (ids []string) {
	for id := range m.manage {
		ids = append(ids, id)
	}
	return
}

// ResetManage resets all changes to the "manage" edge.
func (m *UserMutation) ResetManage() {
	m.manage = nil
	m.clearedmanage = false
	m.removedmanage = nil
}

// AddSendNotificationIDs adds the "sendNotifications" edge to the Notification entity by ids.
func (m *UserMutation) AddSendNotificationIDs(ids ...string) {
	if m.sendNotifications == nil {
		m.sendNotifications = make(map[string]struct{})
	}
	for i := range ids {
		m.sendNotifications[ids[i]] = struct{}{}
	}
}

// ClearSendNotifications clears the "sendNotifications" edge to the Notification entity.
func (m *UserMutation) ClearSendNotifications() {
	m.clearedsendNotifications = true
}

// SendNotificationsCleared reports if the "sendNotifications" edge to the Notification entity was cleared.
func (m *UserMutation) SendNotificationsCleared() bool {
	return m.clearedsendNotifications
}

// RemoveSendNotificationIDs removes the "sendNotifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveSendNotificationIDs(ids ...string) {
	if m.removedsendNotifications == nil {
		m.removedsendNotifications = make(map[string]struct{})
	}
	for i := range ids {
		m.removedsendNotifications[ids[i]] = struct{}{}
	}
}

// RemovedSendNotifications returns the removed IDs of the "sendNotifications" edge to the Notification entity.
func (m *UserMutation) RemovedSendNotificationsIDs() (ids []string) {
	for id := range m.removedsendNotifications {
		ids = append(ids, id)
	}
	return
}

// SendNotificationsIDs returns the "sendNotifications" edge IDs in the mutation.
func (m *UserMutation) SendNotificationsIDs() (ids []string) {
	for id := range m.sendNotifications {
		ids = append(ids, id)
	}
	return
}

// ResetSendNotifications resets all changes to the "sendNotifications" edge.
func (m *UserMutation) ResetSendNotifications() {
	m.sendNotifications = nil
	m.clearedsendNotifications = false
	m.removedsendNotifications = nil
}

// AddReceivedNotificationIDs adds the "receivedNotifications" edge to the Notification entity by ids.
func (m *UserMutation) AddReceivedNotificationIDs(ids ...string) {
	if m.receivedNotifications == nil {
		m.receivedNotifications = make(map[string]struct{})
	}
	for i := range ids {
		m.receivedNotifications[ids[i]] = struct{}{}
	}
}

// ClearReceivedNotifications clears the "receivedNotifications" edge to the Notification entity.
func (m *UserMutation) ClearReceivedNotifications() {
	m.clearedreceivedNotifications = true
}

// ReceivedNotificationsCleared reports if the "receivedNotifications" edge to the Notification entity was cleared.
func (m *UserMutation) ReceivedNotificationsCleared() bool {
	return m.clearedreceivedNotifications
}

// RemoveReceivedNotificationIDs removes the "receivedNotifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveReceivedNotificationIDs(ids ...string) {
	if m.removedreceivedNotifications == nil {
		m.removedreceivedNotifications = make(map[string]struct{})
	}
	for i := range ids {
		m.removedreceivedNotifications[ids[i]] = struct{}{}
	}
}

// RemovedReceivedNotifications returns the removed IDs of the "receivedNotifications" edge to the Notification entity.
func (m *UserMutation) RemovedReceivedNotificationsIDs() (ids []string) {
	for id := range m.removedreceivedNotifications {
		ids = append(ids, id)
	}
	return
}

// ReceivedNotificationsIDs returns the "receivedNotifications" edge IDs in the mutation.
func (m *UserMutation) ReceivedNotificationsIDs() (ids []string) {
	for id := range m.receivedNotifications {
		ids = append(ids, id)
	}
	return
}

// ResetReceivedNotifications resets all changes to the "receivedNotifications" edge.
func (m *UserMutation) ResetReceivedNotifications() {
	m.receivedNotifications = nil
	m.clearedreceivedNotifications = false
	m.removedreceivedNotifications = nil
}

// AddBookRoomIDs adds the "bookRooms" edge to the Reservation entity by ids.
func (m *UserMutation) AddBookRoomIDs(ids ...string) {
	if m.bookRooms == nil {
		m.bookRooms = make(map[string]struct{})
	}
	for i := range ids {
		m.bookRooms[ids[i]] = struct{}{}
	}
}

// ClearBookRooms clears the "bookRooms" edge to the Reservation entity.
func (m *UserMutation) ClearBookRooms() {
	m.clearedbookRooms = true
}

// BookRoomsCleared reports if the "bookRooms" edge to the Reservation entity was cleared.
func (m *UserMutation) BookRoomsCleared() bool {
	return m.clearedbookRooms
}

// RemoveBookRoomIDs removes the "bookRooms" edge to the Reservation entity by IDs.
func (m *UserMutation) RemoveBookRoomIDs(ids ...string) {
	if m.removedbookRooms == nil {
		m.removedbookRooms = make(map[string]struct{})
	}
	for i := range ids {
		m.removedbookRooms[ids[i]] = struct{}{}
	}
}

// RemovedBookRooms returns the removed IDs of the "bookRooms" edge to the Reservation entity.
func (m *UserMutation) RemovedBookRoomsIDs() (ids []string) {
	for id := range m.removedbookRooms {
		ids = append(ids, id)
	}
	return
}

// BookRoomsIDs returns the "bookRooms" edge IDs in the mutation.
func (m *UserMutation) BookRoomsIDs() (ids []string) {
	for id := range m.bookRooms {
		ids = append(ids, id)
	}
	return
}

// ResetBookRooms resets all changes to the "bookRooms" edge.
func (m *UserMutation) ResetBookRooms() {
	m.bookRooms = nil
	m.clearedbookRooms = false
	m.removedbookRooms = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.description != nil {
		fields = append(fields, user.FieldDescription)
	}
	if m.speaking != nil {
		fields = append(fields, user.FieldSpeaking)
	}
	if m.unread != nil {
		fields = append(fields, user.FieldUnread)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	case user.FieldDescription:
		return m.Description()
	case user.FieldSpeaking:
		return m.Speaking()
	case user.FieldUnread:
		return m.Unread()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldDescription:
		return m.OldDescription(ctx)
	case user.FieldSpeaking:
		return m.OldSpeaking(ctx)
	case user.FieldUnread:
		return m.OldUnread(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case user.FieldSpeaking:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeaking(v)
		return nil
	case user.FieldUnread:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnread(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDescription) {
		fields = append(fields, user.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldDescription:
		m.ResetDescription()
		return nil
	case user.FieldSpeaking:
		m.ResetSpeaking()
		return nil
	case user.FieldUnread:
		m.ResetUnread()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.followings != nil {
		edges = append(edges, user.EdgeFollowings)
	}
	if m.room != nil {
		edges = append(edges, user.EdgeRoom)
	}
	if m.host != nil {
		edges = append(edges, user.EdgeHost)
	}
	if m.manage != nil {
		edges = append(edges, user.EdgeManage)
	}
	if m.sendNotifications != nil {
		edges = append(edges, user.EdgeSendNotifications)
	}
	if m.receivedNotifications != nil {
		edges = append(edges, user.EdgeReceivedNotifications)
	}
	if m.bookRooms != nil {
		edges = append(edges, user.EdgeBookRooms)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowings:
		ids := make([]ent.Value, 0, len(m.followings))
		for id := range m.followings {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeManage:
		ids := make([]ent.Value, 0, len(m.manage))
		for id := range m.manage {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSendNotifications:
		ids := make([]ent.Value, 0, len(m.sendNotifications))
		for id := range m.sendNotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedNotifications:
		ids := make([]ent.Value, 0, len(m.receivedNotifications))
		for id := range m.receivedNotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookRooms:
		ids := make([]ent.Value, 0, len(m.bookRooms))
		for id := range m.bookRooms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowings != nil {
		edges = append(edges, user.EdgeFollowings)
	}
	if m.removedmanage != nil {
		edges = append(edges, user.EdgeManage)
	}
	if m.removedsendNotifications != nil {
		edges = append(edges, user.EdgeSendNotifications)
	}
	if m.removedreceivedNotifications != nil {
		edges = append(edges, user.EdgeReceivedNotifications)
	}
	if m.removedbookRooms != nil {
		edges = append(edges, user.EdgeBookRooms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowings:
		ids := make([]ent.Value, 0, len(m.removedfollowings))
		for id := range m.removedfollowings {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeManage:
		ids := make([]ent.Value, 0, len(m.removedmanage))
		for id := range m.removedmanage {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSendNotifications:
		ids := make([]ent.Value, 0, len(m.removedsendNotifications))
		for id := range m.removedsendNotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedNotifications:
		ids := make([]ent.Value, 0, len(m.removedreceivedNotifications))
		for id := range m.removedreceivedNotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookRooms:
		ids := make([]ent.Value, 0, len(m.removedbookRooms))
		for id := range m.removedbookRooms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowings {
		edges = append(edges, user.EdgeFollowings)
	}
	if m.clearedroom {
		edges = append(edges, user.EdgeRoom)
	}
	if m.clearedhost {
		edges = append(edges, user.EdgeHost)
	}
	if m.clearedmanage {
		edges = append(edges, user.EdgeManage)
	}
	if m.clearedsendNotifications {
		edges = append(edges, user.EdgeSendNotifications)
	}
	if m.clearedreceivedNotifications {
		edges = append(edges, user.EdgeReceivedNotifications)
	}
	if m.clearedbookRooms {
		edges = append(edges, user.EdgeBookRooms)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowings:
		return m.clearedfollowings
	case user.EdgeRoom:
		return m.clearedroom
	case user.EdgeHost:
		return m.clearedhost
	case user.EdgeManage:
		return m.clearedmanage
	case user.EdgeSendNotifications:
		return m.clearedsendNotifications
	case user.EdgeReceivedNotifications:
		return m.clearedreceivedNotifications
	case user.EdgeBookRooms:
		return m.clearedbookRooms
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeRoom:
		m.ClearRoom()
		return nil
	case user.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowings:
		m.ResetFollowings()
		return nil
	case user.EdgeRoom:
		m.ResetRoom()
		return nil
	case user.EdgeHost:
		m.ResetHost()
		return nil
	case user.EdgeManage:
		m.ResetManage()
		return nil
	case user.EdgeSendNotifications:
		m.ResetSendNotifications()
		return nil
	case user.EdgeReceivedNotifications:
		m.ResetReceivedNotifications()
		return nil
	case user.EdgeBookRooms:
		m.ResetBookRooms()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
