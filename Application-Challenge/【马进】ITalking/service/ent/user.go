// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"italking.tomotoes.com/m/v1/ent/room"
	"italking.tomotoes.com/m/v1/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Speaking holds the value of the "speaking" field.
	Speaking bool `json:"speaking,omitempty"`
	// Unread holds the value of the "unread" field.
	Unread bool `json:"unread,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges           UserEdges `json:"edges"`
	room_spectators *string
	room_speakers   *string
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Followers holds the value of the followers edge.
	Followers []*User `json:"followers,omitempty"`
	// Followings holds the value of the followings edge.
	Followings []*User `json:"followings,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Host holds the value of the host edge.
	Host *Room `json:"host,omitempty"`
	// Manage holds the value of the manage edge.
	Manage []*Room `json:"manage,omitempty"`
	// SendNotifications holds the value of the sendNotifications edge.
	SendNotifications []*Notification `json:"sendNotifications,omitempty"`
	// ReceivedNotifications holds the value of the receivedNotifications edge.
	ReceivedNotifications []*Notification `json:"receivedNotifications,omitempty"`
	// BookRooms holds the value of the bookRooms edge.
	BookRooms []*Reservation `json:"bookRooms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// FollowingsOrErr returns the Followings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowingsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Followings, nil
	}
	return nil, &NotLoadedError{edge: "followings"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[2] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) HostOrErr() (*Room, error) {
	if e.loadedTypes[3] {
		if e.Host == nil {
			// The edge host was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// ManageOrErr returns the Manage value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ManageOrErr() ([]*Room, error) {
	if e.loadedTypes[4] {
		return e.Manage, nil
	}
	return nil, &NotLoadedError{edge: "manage"}
}

// SendNotificationsOrErr returns the SendNotifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SendNotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[5] {
		return e.SendNotifications, nil
	}
	return nil, &NotLoadedError{edge: "sendNotifications"}
}

// ReceivedNotificationsOrErr returns the ReceivedNotifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReceivedNotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[6] {
		return e.ReceivedNotifications, nil
	}
	return nil, &NotLoadedError{edge: "receivedNotifications"}
}

// BookRoomsOrErr returns the BookRooms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BookRoomsOrErr() ([]*Reservation, error) {
	if e.loadedTypes[7] {
		return e.BookRooms, nil
	}
	return nil, &NotLoadedError{edge: "bookRooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldSpeaking, user.FieldUnread:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldName, user.FieldPassword, user.FieldDescription:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // room_spectators
			values[i] = new(sql.NullString)
		case user.ForeignKeys[1]: // room_speakers
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				u.Description = value.String
			}
		case user.FieldSpeaking:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field speaking", values[i])
			} else if value.Valid {
				u.Speaking = value.Bool
			}
		case user.FieldUnread:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field unread", values[i])
			} else if value.Valid {
				u.Unread = value.Bool
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_spectators", values[i])
			} else if value.Valid {
				u.room_spectators = new(string)
				*u.room_spectators = value.String
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_speakers", values[i])
			} else if value.Valid {
				u.room_speakers = new(string)
				*u.room_speakers = value.String
			}
		}
	}
	return nil
}

// QueryFollowers queries the "followers" edge of the User entity.
func (u *User) QueryFollowers() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowers(u)
}

// QueryFollowings queries the "followings" edge of the User entity.
func (u *User) QueryFollowings() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowings(u)
}

// QueryRoom queries the "room" edge of the User entity.
func (u *User) QueryRoom() *RoomQuery {
	return (&UserClient{config: u.config}).QueryRoom(u)
}

// QueryHost queries the "host" edge of the User entity.
func (u *User) QueryHost() *RoomQuery {
	return (&UserClient{config: u.config}).QueryHost(u)
}

// QueryManage queries the "manage" edge of the User entity.
func (u *User) QueryManage() *RoomQuery {
	return (&UserClient{config: u.config}).QueryManage(u)
}

// QuerySendNotifications queries the "sendNotifications" edge of the User entity.
func (u *User) QuerySendNotifications() *NotificationQuery {
	return (&UserClient{config: u.config}).QuerySendNotifications(u)
}

// QueryReceivedNotifications queries the "receivedNotifications" edge of the User entity.
func (u *User) QueryReceivedNotifications() *NotificationQuery {
	return (&UserClient{config: u.config}).QueryReceivedNotifications(u)
}

// QueryBookRooms queries the "bookRooms" edge of the User entity.
func (u *User) QueryBookRooms() *ReservationQuery {
	return (&UserClient{config: u.config}).QueryBookRooms(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", description=")
	builder.WriteString(u.Description)
	builder.WriteString(", speaking=")
	builder.WriteString(fmt.Sprintf("%v", u.Speaking))
	builder.WriteString(", unread=")
	builder.WriteString(fmt.Sprintf("%v", u.Unread))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
