// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"italking.tomotoes.com/m/v1/ent/notification"
	"italking.tomotoes.com/m/v1/ent/user"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Type holds the value of the "type" field.
	Type notification.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges                       NotificationEdges `json:"edges"`
	user_send_notifications     *string
	user_received_notifications *string
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) SenderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// The edge sender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) ReceiverOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Receiver == nil {
			// The edge receiver was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Receiver, nil
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldID, notification.FieldContent, notification.FieldType:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notification.ForeignKeys[0]: // user_send_notifications
			values[i] = new(sql.NullString)
		case notification.ForeignKeys[1]: // user_received_notifications
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				n.ID = value.String
			}
		case notification.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				n.Content = value.String
			}
		case notification.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				n.Type = notification.Type(value.String)
			}
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_send_notifications", values[i])
			} else if value.Valid {
				n.user_send_notifications = new(string)
				*n.user_send_notifications = value.String
			}
		case notification.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_received_notifications", values[i])
			} else if value.Valid {
				n.user_received_notifications = new(string)
				*n.user_received_notifications = value.String
			}
		}
	}
	return nil
}

// QuerySender queries the "sender" edge of the Notification entity.
func (n *Notification) QuerySender() *UserQuery {
	return (&NotificationClient{config: n.config}).QuerySender(n)
}

// QueryReceiver queries the "receiver" edge of the Notification entity.
func (n *Notification) QueryReceiver() *UserQuery {
	return (&NotificationClient{config: n.config}).QueryReceiver(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return (&NotificationClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", content=")
	builder.WriteString(n.Content)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", n.Type))
	builder.WriteString(", created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification

func (n Notifications) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
