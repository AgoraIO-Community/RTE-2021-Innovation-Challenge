// Code generated by entc, DO NOT EDIT.

package room

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAnnouncement holds the string denoting the announcement field in the database.
	FieldAnnouncement = "announcement"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSpectators holds the string denoting the spectators edge name in mutations.
	EdgeSpectators = "spectators"
	// EdgeSpeakers holds the string denoting the speakers edge name in mutations.
	EdgeSpeakers = "speakers"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// SpectatorsTable is the table the holds the spectators relation/edge.
	SpectatorsTable = "users"
	// SpectatorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SpectatorsInverseTable = "users"
	// SpectatorsColumn is the table column denoting the spectators relation/edge.
	SpectatorsColumn = "room_spectators"
	// SpeakersTable is the table the holds the speakers relation/edge.
	SpeakersTable = "users"
	// SpeakersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SpeakersInverseTable = "users"
	// SpeakersColumn is the table column denoting the speakers relation/edge.
	SpeakersColumn = "room_speakers"
	// CreatorTable is the table the holds the creator relation/edge.
	CreatorTable = "rooms"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "room_creator"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldAnnouncement,
	FieldType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"room_creator",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePublic  Type = "public"
	TypePrivate Type = "private"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePublic, TypePrivate:
		return nil
	default:
		return fmt.Errorf("room: invalid enum value for type field: %q", _type)
	}
}
