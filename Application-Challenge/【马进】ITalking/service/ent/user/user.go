// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSpeaking holds the string denoting the speaking field in the database.
	FieldSpeaking = "speaking"
	// FieldUnread holds the string denoting the unread field in the database.
	FieldUnread = "unread"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFollowers holds the string denoting the followers edge name in mutations.
	EdgeFollowers = "followers"
	// EdgeFollowings holds the string denoting the followings edge name in mutations.
	EdgeFollowings = "followings"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// EdgeManage holds the string denoting the manage edge name in mutations.
	EdgeManage = "manage"
	// EdgeSendNotifications holds the string denoting the sendnotifications edge name in mutations.
	EdgeSendNotifications = "sendNotifications"
	// EdgeReceivedNotifications holds the string denoting the receivednotifications edge name in mutations.
	EdgeReceivedNotifications = "receivedNotifications"
	// EdgeBookRooms holds the string denoting the bookrooms edge name in mutations.
	EdgeBookRooms = "bookRooms"
	// Table holds the table name of the user in the database.
	Table = "users"
	// FollowersTable is the table the holds the followers relation/edge. The primary key declared below.
	FollowersTable = "user_followings"
	// FollowingsTable is the table the holds the followings relation/edge. The primary key declared below.
	FollowingsTable = "user_followings"
	// RoomTable is the table the holds the room relation/edge.
	RoomTable = "users"
	// RoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomInverseTable = "rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "room_spectators"
	// HostTable is the table the holds the host relation/edge.
	HostTable = "users"
	// HostInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	HostInverseTable = "rooms"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "room_speakers"
	// ManageTable is the table the holds the manage relation/edge.
	ManageTable = "rooms"
	// ManageInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	ManageInverseTable = "rooms"
	// ManageColumn is the table column denoting the manage relation/edge.
	ManageColumn = "room_creator"
	// SendNotificationsTable is the table the holds the sendNotifications relation/edge.
	SendNotificationsTable = "notifications"
	// SendNotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	SendNotificationsInverseTable = "notifications"
	// SendNotificationsColumn is the table column denoting the sendNotifications relation/edge.
	SendNotificationsColumn = "user_send_notifications"
	// ReceivedNotificationsTable is the table the holds the receivedNotifications relation/edge.
	ReceivedNotificationsTable = "notifications"
	// ReceivedNotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	ReceivedNotificationsInverseTable = "notifications"
	// ReceivedNotificationsColumn is the table column denoting the receivedNotifications relation/edge.
	ReceivedNotificationsColumn = "user_received_notifications"
	// BookRoomsTable is the table the holds the bookRooms relation/edge.
	BookRoomsTable = "reservations"
	// BookRoomsInverseTable is the table name for the Reservation entity.
	// It exists in this package in order to avoid circular dependency with the "reservation" package.
	BookRoomsInverseTable = "reservations"
	// BookRoomsColumn is the table column denoting the bookRooms relation/edge.
	BookRoomsColumn = "user_book_rooms"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPassword,
	FieldDescription,
	FieldSpeaking,
	FieldUnread,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"room_spectators",
	"room_speakers",
}

var (
	// FollowersPrimaryKey and FollowersColumn2 are the table columns denoting the
	// primary key for the followers relation (M2M).
	FollowersPrimaryKey = []string{"user_id", "follower_id"}
	// FollowingsPrimaryKey and FollowingsColumn2 are the table columns denoting the
	// primary key for the followings relation (M2M).
	FollowingsPrimaryKey = []string{"user_id", "follower_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultSpeaking holds the default value on creation for the "speaking" field.
	DefaultSpeaking bool
	// DefaultUnread holds the default value on creation for the "unread" field.
	DefaultUnread bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
