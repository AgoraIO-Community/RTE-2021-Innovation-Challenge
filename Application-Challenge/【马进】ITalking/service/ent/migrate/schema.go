// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "content", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"official", "follow", "invite"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_send_notifications", Type: field.TypeString, Nullable: true},
		{Name: "user_received_notifications", Type: field.TypeString, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_users_sendNotifications",
				Columns:    []*schema.Column{NotificationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notifications_users_receivedNotifications",
				Columns:    []*schema.Column{NotificationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReservationsColumns holds the columns for the "reservations" table.
	ReservationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 45},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 240},
		{Name: "time", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_book_rooms", Type: field.TypeString, Nullable: true},
	}
	// ReservationsTable holds the schema information for the "reservations" table.
	ReservationsTable = &schema.Table{
		Name:       "reservations",
		Columns:    ReservationsColumns,
		PrimaryKey: []*schema.Column{ReservationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reservations_users_bookRooms",
				Columns:    []*schema.Column{ReservationsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true, Size: 5},
		{Name: "name", Type: field.TypeString, Size: 45},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 240},
		{Name: "announcement", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"public", "private"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_creator", Type: field.TypeString, Nullable: true},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rooms_users_creator",
				Columns:    []*schema.Column{RoomsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 30},
		{Name: "password", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 90, Default: "这家伙很懒，还没有写简介"},
		{Name: "speaking", Type: field.TypeBool, Default: true},
		{Name: "unread", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_spectators", Type: field.TypeString, Nullable: true, Size: 5},
		{Name: "room_speakers", Type: field.TypeString, Nullable: true, Size: 5},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_rooms_spectators",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_rooms_speakers",
				Columns:    []*schema.Column{UsersColumns[9]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserFollowingsColumns holds the columns for the "user_followings" table.
	UserFollowingsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "follower_id", Type: field.TypeString},
	}
	// UserFollowingsTable holds the schema information for the "user_followings" table.
	UserFollowingsTable = &schema.Table{
		Name:       "user_followings",
		Columns:    UserFollowingsColumns,
		PrimaryKey: []*schema.Column{UserFollowingsColumns[0], UserFollowingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_followings_user_id",
				Columns:    []*schema.Column{UserFollowingsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_followings_follower_id",
				Columns:    []*schema.Column{UserFollowingsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		NotificationsTable,
		ReservationsTable,
		RoomsTable,
		UsersTable,
		UserFollowingsTable,
	}
)

func init() {
	NotificationsTable.ForeignKeys[0].RefTable = UsersTable
	NotificationsTable.ForeignKeys[1].RefTable = UsersTable
	ReservationsTable.ForeignKeys[0].RefTable = UsersTable
	RoomsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = RoomsTable
	UsersTable.ForeignKeys[1].RefTable = RoomsTable
	UserFollowingsTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowingsTable.ForeignKeys[1].RefTable = UsersTable
}
