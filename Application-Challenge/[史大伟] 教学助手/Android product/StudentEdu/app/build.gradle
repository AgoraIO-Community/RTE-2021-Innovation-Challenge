apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

configurations {
    ktlint
}

Properties props = new Properties()
props.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    signingConfigs {
        release {
            keyAlias props.key_Alias
            keyPassword props.key_Password
            storeFile file(props.store_File)
            storePassword props.store_Password
            v2SigningEnabled true
            v1SigningEnabled true
        }
//        debug {
//            keyAlias props.key_Alias
//            keyPassword props.key_Password
//            storeFile file(props.store_File)
//            storePassword props.store_Password
//            v2SigningEnabled true
//            v1SigningEnabled true
//        }
    }

    defaultConfig {
        applicationId "com.kangaroo.studentedu"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        testInstrumentationRunner rootProject.ext.dependencies.androidJUnitRunner
        multiDexEnabled true

        buildConfigField "long", "BUILD_TIMESTAMP", getCurrentTime()
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a'
        }
        manifestPlaceholders= [qqappid: "11111111111111111111"]
        flavorDimensions "type"

    }

    buildTypes {
        release {
//            buildConfigField "boolean", "APP_DEBUG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexKeepProguard file('multidex-config.pro')
        }
        debug {
//            buildConfigField "boolean", "APP_DEBUG", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexKeepProguard file('multidex-config.pro')
        }
    }

    productFlavors {
        app_production {
            versionCode 1
            versionName "1.0.0"
            dimension 'type'
            buildConfigField "boolean", "IS_DEV", "false"
        }

        app_dev {
            versionCode 1
            versionName "1.0.0"
            dimension 'type'
            buildConfigField "boolean", "IS_DEV", "true"
        }
    }


    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def name = buildType.name
            if (name.equals("release")) {
                def time = defaultConfig.getBuildConfigFields().get("BUILD_TIMESTAMP").value
                def fileName = "${applicationId}-" + name + "-v${versionName}-" + time + ".apk"
                outputFileName = fileName
            }
        }
    }
    tasks.whenTaskAdded { theTask ->
        if (theTask.name.equals("assembleApp_productionRelease")) {
            theTask.dependsOn "cleanOutputsDir"
        }
    }

    task cleanOutputsDir {
        doFirst {
            def outputsPath = getBuildDir().getAbsolutePath() + File.separator + "outputs" + File.separator + "apk" + File.separator + "app_production" + File.separator + "release"
            new File(outputsPath).deleteDir()
        }

    }

    dataBinding {
        enabled = true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    def types = ["assembleApp_productionRelease" : "app_production"]
//    this.gradle.taskGraph.beforeTask { task ->
//        def match = false
//        types.each { k, v ->
//            if (task.name == k) {
//                match = true
//            }
//        }
//        if (match) {
//            def outputsPath = getBuildDir().getAbsolutePath() + File.separator + "outputs" + File.separator + "apk" + File.separator + types[task.name] + File.separator + "release"
//            new File(outputsPath).deleteDir()
//        }
//    }

    this.gradle.taskGraph.afterTask { task ->//每个task执行结束时会调用这个方法
        def match = false
        types.each { k, v ->
            if (task.name == k) {
                match = true
            }
        }
        if (match) {
            def outPath = getBuildDir().getAbsolutePath() + File.separator +
                    "outputs" + File.separator +
                    "apk" + File.separator +
                    types[task.name] + File.separator +
                    "release" + File.separator
            def time = defaultConfig.getBuildConfigFields().get("BUILD_TIMESTAMP").value

            def appFilePath = outPath + "${defaultConfig.applicationId}-release-v" + productFlavors.app_production.versionName + "-" + time + ".apk"//这里的versionName无法动态获取

            println "appFilePath=" + appFilePath

            if (!new File(appFilePath).exists()) {
                println "apk not exist"
                return
            }
            println "开始加固"
//            executeLibCmd('java.exe -jar ' + rootDir + File.separator +'android-base'+ File.separator+'basektlib'+ File.separator + "jiagu" + File.separator + "autojiagu.jar " + rootDir + " " + appFilePath + " " + file(props.store_File).getCanonicalPath()+ ' ' + props.store_Password + ' ' + props.key_Alias + ' ' + props.key_Password, '' + rootDir)
            println "加固完成"
        }
    }
}


////Arouter路由配置 kotlin配置
//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}

task appTemplate {

    doLast{
        println "Auto Template start"
        def cmdBase = 'java -jar ' + rootDir + File.separator +'android-base'+ File.separator+'basektlib'+ File.separator+ 'autotemplate' + File.separator + 'autotemplate.jar '+ rootDir + ' '  + File.separator+'app'+ File.separator+'src' + File.separator+'main' + ' '+ 'com.kangaroo.studentedu' + ' '+  projectDir +  File.separator + 'autotemplate.properties '+ rootDir + File.separator + 'autorecipe.xml.ftl'+ ' '+ projectDir + File.separator + 'page.xml'
        def cmdApi = 'java -jar ' + rootDir + File.separator +'android-base'+ File.separator+'basektlib'+ File.separator+ 'autoapi' + File.separator + 'autoapi.jar '+ rootDir + ' '  + File.separator+'app'+ File.separator+'src' + File.separator+'main' + File.separator+'java' + ' '+ 'com.kangaroo.studentedu' + ' '+  projectDir +  File.separator + 'api.properties '+ rootDir + File.separator + 'recipe.xml.ftl'

//        println cmdBase
        def m = '' + rootDir
        executeLibCmd(cmdBase, m)
        executeLibCmd(cmdApi, m)
        println "Auto Template end"
    }

}
kotlin {
    experimental {
        coroutines 'enable'
    }
}
String getCurrentTime() {
    Date date = new Date()
    return date.format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00")) + "L"
}
def executeLibCmd(cmd, m) {
    def cmdResult = cmd.execute(null, new File(m)).text.trim()
    println cmdResult
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.dependencies.kotlin.kotlin_stdlib

    implementation rootProject.ext.dependencies.androidx.material
    implementation rootProject.ext.dependencies.navigation.navigation_fragment_ktx
    implementation rootProject.ext.dependencies.navigation.navigation_ui_ktx

    ktlint rootProject.ext.dependencies.tools.ktlint
    implementation rootProject.ext.dependencies.androidx.appcompat
    implementation rootProject.ext.dependencies.androidx.constraintlayout
    implementation rootProject.ext.dependencies.androidx.legacy_support_v4
    implementation rootProject.ext.dependencies.lifecycle.lifecycle_extensions
    testImplementation rootProject.ext.dependencies.test.junit
    androidTestImplementation rootProject.ext.dependencies.test.runner
    androidTestImplementation rootProject.ext.dependencies.test.espresso_core

    if (!props.isBuildModule.toBoolean()) {
//        runtimeOnly project(path: ':base-module-reader')
//        runtimeOnly project(path: ':base-module-reading')
//        runtimeOnly project(path: ':base-module-kefu')
//        runtimeOnly project(path: ':base-module-share')
//        implementation project(path: ':base-module-test')
//        implementation project(path: ':base-module-apm')
//        runtimeOnly project(path: ':base-module-bugly')
//        implementation project(path: ':base-module-aliapm')
//        runtimeOnly project(':base-module-video')
        implementation (project(path: ':openLive') )
//                {
//            exclude group: 'com.github.agorabuilder'
//            exclude group: 'io.agora.rtc'
//        }

    }
    kapt rootProject.ext.dependencies.arouter.arouter_compiler
//    implementation project(path: ':ease-im-kit')
    implementation 'io.hyphenate:ease-im-kit:3.8.1'
    implementation 'io.hyphenate:hyphenate-chat:3.8.1'

//    implementation project(path: ':lib-common')

    implementation project(path: ':baselib-common')
    implementation project(path: ':base-lib-picselect')

    kapt rootProject.ext.dependencies.tools.moshi_kotlin_codegen
    kapt rootProject.ext.dependencies.room.room_compiler


    kapt rootProject.ext.dependencies.tools.autopage_processor


//    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
//    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.16.0-RC1"
//    //mvvm
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-beta01'
//    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-beta01'
//    implementation "androidx.fragment:fragment-ktx:1.2.5"

//    detekt("io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version")
//    detekt("io.gitlab.arturbosch.detekt:detekt-cli:$detekt_version")

//    detektPlugins ("io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version")

    implementation 'com.haibin:calendarview:3.6.9'

    //热修复
//    implementation rootProject.ext.dependencies.thirdpart.hotfix

    //录音
    implementation rootProject.ext.dependencies.tools.zlw_audio_recorder


    implementation ('com.github.AgoraIO-Community:CloudClass-Android:v1.1.0')
//            {
//        exclude group: 'com.github.agorabuilder'
//        exclude group: 'io.agora.rtc'
//    }
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
//    implementation 'com.github.agorabuilder:native-full-sdk:3.4.2'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "检查kotlin 风格"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "修复 kotlin 风格"
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

