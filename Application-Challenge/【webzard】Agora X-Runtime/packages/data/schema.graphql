### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

type Class {
  createdAt: DateTime!
  id: Int!
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int, orderBy: [LessonOrderByInput!], where: LessonWhereInput): [Lesson!]!
  name: String!
  students(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
  teacher: User!
  updatedAt: DateTime!
}

input ClassCreateInput {
  createdAt: DateTime
  lessons: LessonCreateNestedManyWithoutClassInput
  name: String!
  students: UserCreateNestedManyWithoutParticipatedClassesInput
  teacher: UserCreateNestedOneWithoutTeachedClassesInput!
  updatedAt: DateTime
}

input ClassCreateManyTeacherInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input ClassCreateManyTeacherInputEnvelope {
  data: [ClassCreateManyTeacherInput!]
  skipDuplicates: Boolean
}

input ClassCreateNestedManyWithoutStudentsInput {
  connect: [ClassWhereUniqueInput!]
  connectOrCreate: [ClassCreateOrConnectWithoutStudentsInput!]
  create: [ClassCreateWithoutStudentsInput!]
}

input ClassCreateNestedManyWithoutTeacherInput {
  connect: [ClassWhereUniqueInput!]
  connectOrCreate: [ClassCreateOrConnectWithoutTeacherInput!]
  create: [ClassCreateWithoutTeacherInput!]
  createMany: ClassCreateManyTeacherInputEnvelope
}

input ClassCreateNestedOneWithoutLessonsInput {
  connect: ClassWhereUniqueInput
  connectOrCreate: ClassCreateOrConnectWithoutLessonsInput
  create: ClassCreateWithoutLessonsInput
}

input ClassCreateOrConnectWithoutLessonsInput {
  create: ClassCreateWithoutLessonsInput!
  where: ClassWhereUniqueInput!
}

input ClassCreateOrConnectWithoutStudentsInput {
  create: ClassCreateWithoutStudentsInput!
  where: ClassWhereUniqueInput!
}

input ClassCreateOrConnectWithoutTeacherInput {
  create: ClassCreateWithoutTeacherInput!
  where: ClassWhereUniqueInput!
}

input ClassCreateWithoutLessonsInput {
  createdAt: DateTime
  name: String!
  students: UserCreateNestedManyWithoutParticipatedClassesInput
  teacher: UserCreateNestedOneWithoutTeachedClassesInput!
  updatedAt: DateTime
}

input ClassCreateWithoutStudentsInput {
  createdAt: DateTime
  lessons: LessonCreateNestedManyWithoutClassInput
  name: String!
  teacher: UserCreateNestedOneWithoutTeachedClassesInput!
  updatedAt: DateTime
}

input ClassCreateWithoutTeacherInput {
  createdAt: DateTime
  lessons: LessonCreateNestedManyWithoutClassInput
  name: String!
  students: UserCreateNestedManyWithoutParticipatedClassesInput
  updatedAt: DateTime
}

input ClassListRelationFilter {
  every: ClassWhereInput
  none: ClassWhereInput
  some: ClassWhereInput
}

input ClassOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  teacherId: SortOrder
  updatedAt: SortOrder
}

input ClassScalarWhereInput {
  AND: [ClassScalarWhereInput!]
  NOT: [ClassScalarWhereInput!]
  OR: [ClassScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  teacherId: IntFilter
  updatedAt: DateTimeFilter
}

input ClassUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutClassInput
  name: StringFieldUpdateOperationsInput
  students: UserUpdateManyWithoutParticipatedClassesInput
  teacher: UserUpdateOneRequiredWithoutTeachedClassesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassUpdateManyWithWhereWithoutStudentsInput {
  data: ClassUpdateManyMutationInput!
  where: ClassScalarWhereInput!
}

input ClassUpdateManyWithWhereWithoutTeacherInput {
  data: ClassUpdateManyMutationInput!
  where: ClassScalarWhereInput!
}

input ClassUpdateManyWithoutStudentsInput {
  connect: [ClassWhereUniqueInput!]
  connectOrCreate: [ClassCreateOrConnectWithoutStudentsInput!]
  create: [ClassCreateWithoutStudentsInput!]
  delete: [ClassWhereUniqueInput!]
  deleteMany: [ClassScalarWhereInput!]
  disconnect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutStudentsInput!]
  updateMany: [ClassUpdateManyWithWhereWithoutStudentsInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutStudentsInput!]
}

input ClassUpdateManyWithoutTeacherInput {
  connect: [ClassWhereUniqueInput!]
  connectOrCreate: [ClassCreateOrConnectWithoutTeacherInput!]
  create: [ClassCreateWithoutTeacherInput!]
  createMany: ClassCreateManyTeacherInputEnvelope
  delete: [ClassWhereUniqueInput!]
  deleteMany: [ClassScalarWhereInput!]
  disconnect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutTeacherInput!]
  updateMany: [ClassUpdateManyWithWhereWithoutTeacherInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutTeacherInput!]
}

input ClassUpdateOneRequiredWithoutLessonsInput {
  connect: ClassWhereUniqueInput
  connectOrCreate: ClassCreateOrConnectWithoutLessonsInput
  create: ClassCreateWithoutLessonsInput
  update: ClassUpdateWithoutLessonsInput
  upsert: ClassUpsertWithoutLessonsInput
}

input ClassUpdateWithWhereUniqueWithoutStudentsInput {
  data: ClassUpdateWithoutStudentsInput!
  where: ClassWhereUniqueInput!
}

input ClassUpdateWithWhereUniqueWithoutTeacherInput {
  data: ClassUpdateWithoutTeacherInput!
  where: ClassWhereUniqueInput!
}

input ClassUpdateWithoutLessonsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  students: UserUpdateManyWithoutParticipatedClassesInput
  teacher: UserUpdateOneRequiredWithoutTeachedClassesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassUpdateWithoutStudentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutClassInput
  name: StringFieldUpdateOperationsInput
  teacher: UserUpdateOneRequiredWithoutTeachedClassesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassUpdateWithoutTeacherInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  lessons: LessonUpdateManyWithoutClassInput
  name: StringFieldUpdateOperationsInput
  students: UserUpdateManyWithoutParticipatedClassesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClassUpsertWithWhereUniqueWithoutStudentsInput {
  create: ClassCreateWithoutStudentsInput!
  update: ClassUpdateWithoutStudentsInput!
  where: ClassWhereUniqueInput!
}

input ClassUpsertWithWhereUniqueWithoutTeacherInput {
  create: ClassCreateWithoutTeacherInput!
  update: ClassUpdateWithoutTeacherInput!
  where: ClassWhereUniqueInput!
}

input ClassUpsertWithoutLessonsInput {
  create: ClassCreateWithoutLessonsInput!
  update: ClassUpdateWithoutLessonsInput!
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  lessons: LessonListRelationFilter
  name: StringFilter
  students: UserListRelationFilter
  teacher: UserWhereInput
  teacherId: IntFilter
  updatedAt: DateTimeFilter
}

input ClassWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Lesson {
  class: Class!
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input LessonCreateInput {
  class: ClassCreateNestedOneWithoutLessonsInput!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input LessonCreateManyClassInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input LessonCreateManyClassInputEnvelope {
  data: [LessonCreateManyClassInput!]
  skipDuplicates: Boolean
}

input LessonCreateNestedManyWithoutClassInput {
  connect: [LessonWhereUniqueInput!]
  connectOrCreate: [LessonCreateOrConnectWithoutClassInput!]
  create: [LessonCreateWithoutClassInput!]
  createMany: LessonCreateManyClassInputEnvelope
}

input LessonCreateOrConnectWithoutClassInput {
  create: LessonCreateWithoutClassInput!
  where: LessonWhereUniqueInput!
}

input LessonCreateWithoutClassInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input LessonListRelationFilter {
  every: LessonWhereInput
  none: LessonWhereInput
  some: LessonWhereInput
}

input LessonOrderByInput {
  classId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input LessonScalarWhereInput {
  AND: [LessonScalarWhereInput!]
  NOT: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  classId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input LessonUpdateInput {
  class: ClassUpdateOneRequiredWithoutLessonsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpdateManyWithWhereWithoutClassInput {
  data: LessonUpdateManyMutationInput!
  where: LessonScalarWhereInput!
}

input LessonUpdateManyWithoutClassInput {
  connect: [LessonWhereUniqueInput!]
  connectOrCreate: [LessonCreateOrConnectWithoutClassInput!]
  create: [LessonCreateWithoutClassInput!]
  createMany: LessonCreateManyClassInputEnvelope
  delete: [LessonWhereUniqueInput!]
  deleteMany: [LessonScalarWhereInput!]
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutClassInput!]
  updateMany: [LessonUpdateManyWithWhereWithoutClassInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutClassInput!]
}

input LessonUpdateWithWhereUniqueWithoutClassInput {
  data: LessonUpdateWithoutClassInput!
  where: LessonWhereUniqueInput!
}

input LessonUpdateWithoutClassInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LessonUpsertWithWhereUniqueWithoutClassInput {
  create: LessonCreateWithoutClassInput!
  update: LessonUpdateWithoutClassInput!
  where: LessonWhereUniqueInput!
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  class: ClassWhereInput
  classId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input LessonWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneClass(data: ClassCreateInput!): Class!
  createOneLesson(data: LessonCreateInput!): Lesson!
  createOneUser(data: UserCreateInput!): User!
  deleteManyClass(where: ClassWhereInput): AffectedRowsOutput!
  deleteManyLesson(where: LessonWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneClass(where: ClassWhereUniqueInput!): Class
  deleteOneLesson(where: LessonWhereUniqueInput!): Lesson
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyClass(data: ClassUpdateManyMutationInput!, where: ClassWhereInput): AffectedRowsOutput!
  updateManyLesson(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateOneLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneClass(create: ClassCreateInput!, update: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class!
  upsertOneLesson(create: LessonCreateInput!, update: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  class(where: ClassWhereUniqueInput!): Class
  classes(after: ClassWhereUniqueInput, before: ClassWhereUniqueInput, first: Int, last: Int, orderBy: [ClassOrderByInput!], where: ClassWhereInput): [Class!]!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int, orderBy: [LessonOrderByInput!], where: LessonWhereInput): [Lesson!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  participatedClasses(after: ClassWhereUniqueInput, before: ClassWhereUniqueInput, first: Int, last: Int, orderBy: [ClassOrderByInput!], where: ClassWhereInput): [Class!]!
  role: Role!
  teachedClasses(after: ClassWhereUniqueInput, before: ClassWhereUniqueInput, first: Int, last: Int, orderBy: [ClassOrderByInput!], where: ClassWhereInput): [Class!]!
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String!
  participatedClasses: ClassCreateNestedManyWithoutStudentsInput
  role: Role!
  teachedClasses: ClassCreateNestedManyWithoutTeacherInput
  updatedAt: DateTime
}

input UserCreateNestedManyWithoutParticipatedClassesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutParticipatedClassesInput!]
  create: [UserCreateWithoutParticipatedClassesInput!]
}

input UserCreateNestedOneWithoutTeachedClassesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeachedClassesInput
  create: UserCreateWithoutTeachedClassesInput
}

input UserCreateOrConnectWithoutParticipatedClassesInput {
  create: UserCreateWithoutParticipatedClassesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeachedClassesInput {
  create: UserCreateWithoutTeachedClassesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutParticipatedClassesInput {
  createdAt: DateTime
  email: String!
  name: String!
  role: Role!
  teachedClasses: ClassCreateNestedManyWithoutTeacherInput
  updatedAt: DateTime
}

input UserCreateWithoutTeachedClassesInput {
  createdAt: DateTime
  email: String!
  name: String!
  participatedClasses: ClassCreateNestedManyWithoutStudentsInput
  role: Role!
  updatedAt: DateTime
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  participatedClasses: ClassUpdateManyWithoutStudentsInput
  role: EnumRoleFieldUpdateOperationsInput
  teachedClasses: ClassUpdateManyWithoutTeacherInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutParticipatedClassesInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutParticipatedClassesInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutParticipatedClassesInput!]
  create: [UserCreateWithoutParticipatedClassesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutParticipatedClassesInput!]
  updateMany: [UserUpdateManyWithWhereWithoutParticipatedClassesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutParticipatedClassesInput!]
}

input UserUpdateOneRequiredWithoutTeachedClassesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeachedClassesInput
  create: UserCreateWithoutTeachedClassesInput
  update: UserUpdateWithoutTeachedClassesInput
  upsert: UserUpsertWithoutTeachedClassesInput
}

input UserUpdateWithWhereUniqueWithoutParticipatedClassesInput {
  data: UserUpdateWithoutParticipatedClassesInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutParticipatedClassesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  teachedClasses: ClassUpdateManyWithoutTeacherInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTeachedClassesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  participatedClasses: ClassUpdateManyWithoutStudentsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutParticipatedClassesInput {
  create: UserCreateWithoutParticipatedClassesInput!
  update: UserUpdateWithoutParticipatedClassesInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutTeachedClassesInput {
  create: UserCreateWithoutTeachedClassesInput!
  update: UserUpdateWithoutTeachedClassesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  participatedClasses: ClassListRelationFilter
  role: EnumRoleFilter
  teachedClasses: ClassListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
