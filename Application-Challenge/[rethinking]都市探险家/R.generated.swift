//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Alibaba-PuHuiTi-Bold.otf`.
    static let alibabaPuHuiTiBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alibaba-PuHuiTi-Bold", pathExtension: "otf")
    /// Resource file `Alibaba-PuHuiTi-Heavy.otf`.
    static let alibabaPuHuiTiHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alibaba-PuHuiTi-Heavy", pathExtension: "otf")
    /// Resource file `Alibaba-PuHuiTi-Light.otf`.
    static let alibabaPuHuiTiLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alibaba-PuHuiTi-Light", pathExtension: "otf")
    /// Resource file `Alibaba-PuHuiTi-Medium.otf`.
    static let alibabaPuHuiTiMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alibaba-PuHuiTi-Medium", pathExtension: "otf")
    /// Resource file `Alibaba-PuHuiTi-Regular.otf`.
    static let alibabaPuHuiTiRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Alibaba-PuHuiTi-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "Alibaba-PuHuiTi-Bold", withExtension: "otf")`
    static func alibabaPuHuiTiBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alibabaPuHuiTiBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alibaba-PuHuiTi-Heavy", withExtension: "otf")`
    static func alibabaPuHuiTiHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alibabaPuHuiTiHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alibaba-PuHuiTi-Light", withExtension: "otf")`
    static func alibabaPuHuiTiLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alibabaPuHuiTiLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alibaba-PuHuiTi-Medium", withExtension: "otf")`
    static func alibabaPuHuiTiMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alibabaPuHuiTiMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Alibaba-PuHuiTi-Regular", withExtension: "otf")`
    static func alibabaPuHuiTiRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alibabaPuHuiTiRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `AlibabaPuHuiTiB`.
    static let alibabaPuHuiTiB = Rswift.FontResource(fontName: "AlibabaPuHuiTiB")
    /// Font `AlibabaPuHuiTiH`.
    static let alibabaPuHuiTiH = Rswift.FontResource(fontName: "AlibabaPuHuiTiH")
    /// Font `AlibabaPuHuiTiL`.
    static let alibabaPuHuiTiL = Rswift.FontResource(fontName: "AlibabaPuHuiTiL")
    /// Font `AlibabaPuHuiTiM`.
    static let alibabaPuHuiTiM = Rswift.FontResource(fontName: "AlibabaPuHuiTiM")
    /// Font `AlibabaPuHuiTiR`.
    static let alibabaPuHuiTiR = Rswift.FontResource(fontName: "AlibabaPuHuiTiR")

    /// `UIFont(name: "AlibabaPuHuiTiB", size: ...)`
    static func alibabaPuHuiTiB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alibabaPuHuiTiB, size: size)
    }

    /// `UIFont(name: "AlibabaPuHuiTiH", size: ...)`
    static func alibabaPuHuiTiH(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alibabaPuHuiTiH, size: size)
    }

    /// `UIFont(name: "AlibabaPuHuiTiL", size: ...)`
    static func alibabaPuHuiTiL(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alibabaPuHuiTiL, size: size)
    }

    /// `UIFont(name: "AlibabaPuHuiTiM", size: ...)`
    static func alibabaPuHuiTiM(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alibabaPuHuiTiM, size: size)
    }

    /// `UIFont(name: "AlibabaPuHuiTiR", size: ...)`
    static func alibabaPuHuiTiR(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: alibabaPuHuiTiR, size: size)
    }

    static func validate() throws {
      if R.font.alibabaPuHuiTiB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlibabaPuHuiTiB' could not be loaded, is 'Alibaba-PuHuiTi-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alibabaPuHuiTiH(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlibabaPuHuiTiH' could not be loaded, is 'Alibaba-PuHuiTi-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alibabaPuHuiTiL(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlibabaPuHuiTiL' could not be loaded, is 'Alibaba-PuHuiTi-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alibabaPuHuiTiM(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlibabaPuHuiTiM' could not be loaded, is 'Alibaba-PuHuiTi-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.alibabaPuHuiTiR(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AlibabaPuHuiTiR' could not be loaded, is 'Alibaba-PuHuiTi-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `age_select_icon`.
    static let age_select_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "age_select_icon")
    /// Image `append_user_icon`.
    static let append_user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "append_user_icon")
    /// Image `avatar1`.
    static let avatar1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar1")
    /// Image `avatar2`.
    static let avatar2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar2")
    /// Image `avatar3`.
    static let avatar3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar3")
    /// Image `begin_pulstor_icon`.
    static let begin_pulstor_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "begin_pulstor_icon")
    /// Image `black_flag_icon`.
    static let black_flag_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_flag_icon")
    /// Image `close_audio_room_icon`.
    static let close_audio_room_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_audio_room_icon")
    /// Image `female_icon`.
    static let female_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_icon")
    /// Image `join_background`.
    static let join_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "join_background")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `location_icon`.
    static let location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_icon")
    /// Image `login_bg`.
    static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_bg")
    /// Image `male_icon`.
    static let male_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_icon")
    /// Image `mic_icon`.
    static let mic_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mic_icon")
    /// Image `new_task_icon`.
    static let new_task_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_task_icon")
    /// Image `sending_state_icon`.
    static let sending_state_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "sending_state_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "age_select_icon", bundle: ..., traitCollection: ...)`
    static func age_select_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.age_select_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "append_user_icon", bundle: ..., traitCollection: ...)`
    static func append_user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.append_user_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar1", bundle: ..., traitCollection: ...)`
    static func avatar1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar2", bundle: ..., traitCollection: ...)`
    static func avatar2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar3", bundle: ..., traitCollection: ...)`
    static func avatar3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "begin_pulstor_icon", bundle: ..., traitCollection: ...)`
    static func begin_pulstor_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.begin_pulstor_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_flag_icon", bundle: ..., traitCollection: ...)`
    static func black_flag_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_flag_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_audio_room_icon", bundle: ..., traitCollection: ...)`
    static func close_audio_room_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_audio_room_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_icon", bundle: ..., traitCollection: ...)`
    static func female_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "join_background", bundle: ..., traitCollection: ...)`
    static func join_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.join_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_icon", bundle: ..., traitCollection: ...)`
    static func location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
    static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_icon", bundle: ..., traitCollection: ...)`
    static func male_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mic_icon", bundle: ..., traitCollection: ...)`
    static func mic_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mic_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_task_icon", bundle: ..., traitCollection: ...)`
    static func new_task_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_task_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sending_state_icon", bundle: ..., traitCollection: ...)`
    static func sending_state_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sending_state_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `UserLoginViewController`.
    static let userLoginViewController = _R.nib._UserLoginViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserLoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userLoginViewController) instead")
    static func userLoginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userLoginViewController)
    }
    #endif

    static func userLoginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.userLoginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _UserLoginViewController.validate()
    }

    struct _UserLoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserLoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "avatar1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar1' is used in nib 'UserLoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatar2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar2' is used in nib 'UserLoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatar3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar3' is used in nib 'UserLoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_bg' is used in nib 'UserLoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
